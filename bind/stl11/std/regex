/* This is an automatically generated bindings file. Don't modify it! */
#if !defined(BOOST_STL11_REGEX_MAP_NAMESPACE_BEGIN) || !defined(BOOST_STL11_REGEX_MAP_NAMESPACE_END)
#error You need to define BOOST_STL11_REGEX_MAP_NAMESPACE_BEGIN and BOOST_STL11_REGEX_MAP_NAMESPACE_END to use this header file
#endif
#include <regex>
BOOST_STL11_REGEX_MAP_NAMESPACE_BEGIN
extern const char *boost_local_bind_in;
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_TOKEN_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_TOKEN_ITERATOR
#else
template<class _Bi_iter, class _Ch_type, class _Rx_traits> using regex_token_iterator = std::regex_token_iterator<_Bi_iter, _Ch_type, _Rx_traits>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_WSREGEX_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_WSREGEX_ITERATOR
#else
using std::wsregex_iterator;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_ITERATOR
#else
template<class _Bi_iter, class _Ch_type, class _Rx_traits> using regex_iterator = std::regex_iterator<_Bi_iter, _Ch_type, _Rx_traits>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_REPLACE
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_REPLACE
#else
using std::regex_replace;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_WSSUB_MATCH
#undef BOOST_STL11_REGEX_MAP_NO_WSSUB_MATCH
#else
using std::wssub_match;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_WCSUB_MATCH
#undef BOOST_STL11_REGEX_MAP_NO_WCSUB_MATCH
#else
using std::wcsub_match;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_SSUB_MATCH
#undef BOOST_STL11_REGEX_MAP_NO_SSUB_MATCH
#else
using std::ssub_match;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_CSUB_MATCH
#undef BOOST_STL11_REGEX_MAP_NO_CSUB_MATCH
#else
using std::csub_match;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX
#undef BOOST_STL11_REGEX_MAP_NO_REGEX
#else
using std::regex;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_TRAITS
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_TRAITS
#else
template<class _Ch_type> using regex_traits = std::regex_traits<_Ch_type>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_ERROR
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_ERROR
#else
using regex_error = std::regex_error;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_CONST_POINTER_CAST
#undef BOOST_STL11_REGEX_MAP_NO_CONST_POINTER_CAST
#else
using std::const_pointer_cast;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_BAD_WEAK_PTR
#undef BOOST_STL11_REGEX_MAP_NO_BAD_WEAK_PTR
#else
using bad_weak_ptr = std::bad_weak_ptr;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_REF
#undef BOOST_STL11_REGEX_MAP_NO_REF
#else
using std::ref;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_WSREGEX_TOKEN_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_WSREGEX_TOKEN_ITERATOR
#else
using std::wsregex_token_iterator;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_CREGEX_TOKEN_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_CREGEX_TOKEN_ITERATOR
#else
using std::cregex_token_iterator;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_HASH
#undef BOOST_STL11_REGEX_MAP_NO_HASH
#else
template<class _Tp> using hash = std::hash<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_WCREGEX_TOKEN_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_WCREGEX_TOKEN_ITERATOR
#else
using std::wcregex_token_iterator;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_SREGEX_TOKEN_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_SREGEX_TOKEN_ITERATOR
#else
using std::sregex_token_iterator;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_STATIC_POINTER_CAST
#undef BOOST_STL11_REGEX_MAP_NO_STATIC_POINTER_CAST
#else
using std::static_pointer_cast;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_SAME
#undef BOOST_STL11_REGEX_MAP_NO_IS_SAME
#else
template<class type_parameter_0_0, class type_parameter_0_1> using is_same = std::is_same<type_parameter_0_0, type_parameter_0_1>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_WEAK_PTR
#undef BOOST_STL11_REGEX_MAP_NO_WEAK_PTR
#else
template<class _Tp> using weak_ptr = std::weak_ptr<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_CMATCH
#undef BOOST_STL11_REGEX_MAP_NO_CMATCH
#else
using std::cmatch;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_MATCH
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_MATCH
#else
using std::regex_match;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_REFERENCE
#undef BOOST_STL11_REGEX_MAP_NO_IS_REFERENCE
#else
template<class _Tp> using is_reference = std::is_reference<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_SIGNED
#undef BOOST_STL11_REGEX_MAP_NO_IS_SIGNED
#else
template<class _Tp> using is_signed = std::is_signed<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_CONST
#undef BOOST_STL11_REGEX_MAP_NO_IS_CONST
#else
template<class type_parameter_0_0> using is_const = std::is_const<type_parameter_0_0>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_MEMBER_POINTER
#undef BOOST_STL11_REGEX_MAP_NO_IS_MEMBER_POINTER
#else
template<class _Tp> using is_member_pointer = std::is_member_pointer<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_MEMBER_POINTER
#undef BOOST_STL11_REGEX_MAP_NO_IS_MEMBER_POINTER
#else
template<class type_parameter_0_0> using is_member_pointer = std::is_member_pointer<type_parameter_0_0>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_ABSTRACT
#undef BOOST_STL11_REGEX_MAP_NO_IS_ABSTRACT
#else
template<class _Tp> using is_abstract = std::is_abstract<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_REMOVE_CV
#undef BOOST_STL11_REGEX_MAP_NO_REMOVE_CV
#else
template<class _Tp> using remove_cv = std::remove_cv<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_REMOVE_CV
#undef BOOST_STL11_REGEX_MAP_NO_REMOVE_CV
#else
template<class type_parameter_0_0> using remove_cv = std::remove_cv<type_parameter_0_0>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_INTEGRAL_CONSTANT
#undef BOOST_STL11_REGEX_MAP_NO_INTEGRAL_CONSTANT
#else
template<class _Tp, _Tp _1> using integral_constant = std::integral_constant<_Tp, _1>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_TRUE_TYPE
#undef BOOST_STL11_REGEX_MAP_NO_TRUE_TYPE
#else
using std::true_type;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_UNSIGNED
#undef BOOST_STL11_REGEX_MAP_NO_IS_UNSIGNED
#else
template<class _Tp> using is_unsigned = std::is_unsigned<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_GET_DELETER
#undef BOOST_STL11_REGEX_MAP_NO_GET_DELETER
#else
using std::get_deleter;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_INTEGRAL
#undef BOOST_STL11_REGEX_MAP_NO_IS_INTEGRAL
#else
template<class _Tp> using is_integral = std::is_integral<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_POINTER
#undef BOOST_STL11_REGEX_MAP_NO_IS_POINTER
#else
template<class _Tp> using is_pointer = std::is_pointer<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_ADD_VOLATILE
#undef BOOST_STL11_REGEX_MAP_NO_ADD_VOLATILE
#else
template<class _Tp> using add_volatile = std::add_volatile<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_CREF
#undef BOOST_STL11_REGEX_MAP_NO_CREF
#else
using std::cref;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_VOLATILE
#undef BOOST_STL11_REGEX_MAP_NO_IS_VOLATILE
#else
template<class type_parameter_0_0> using is_volatile = std::is_volatile<type_parameter_0_0>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_CONVERTIBLE
#undef BOOST_STL11_REGEX_MAP_NO_IS_CONVERTIBLE
#else
template<class _From, class _To> using is_convertible = std::is_convertible<_From, _To>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_CREGEX_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_CREGEX_ITERATOR
#else
using std::cregex_iterator;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_ENUM
#undef BOOST_STL11_REGEX_MAP_NO_IS_ENUM
#else
template<class _Tp> using is_enum = std::is_enum<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_REMOVE_POINTER
#undef BOOST_STL11_REGEX_MAP_NO_REMOVE_POINTER
#else
template<class _Tp> using remove_pointer = std::remove_pointer<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_SHARED_PTR
#undef BOOST_STL11_REGEX_MAP_NO_SHARED_PTR
#else
template<class _Tp> using shared_ptr = std::shared_ptr<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_FALSE_TYPE
#undef BOOST_STL11_REGEX_MAP_NO_FALSE_TYPE
#else
using std::false_type;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_DYNAMIC_POINTER_CAST
#undef BOOST_STL11_REGEX_MAP_NO_DYNAMIC_POINTER_CAST
#else
using std::dynamic_pointer_cast;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_SWAP
#undef BOOST_STL11_REGEX_MAP_NO_SWAP
#else
using std::swap;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_MATCH_RESULTS
#undef BOOST_STL11_REGEX_MAP_NO_MATCH_RESULTS
#else
template<class _Bi_iter, class _Alloc> using match_results = std::match_results<_Bi_iter, _Alloc>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_MATCH_RESULTS
#undef BOOST_STL11_REGEX_MAP_NO_MATCH_RESULTS
#else
template<class type_parameter_0_0, class type_parameter_0_1> using match_results = std::match_results<type_parameter_0_0, type_parameter_0_1>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_WCREGEX_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_WCREGEX_ITERATOR
#else
using std::wcregex_iterator;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_FUNCTION
#undef BOOST_STL11_REGEX_MAP_NO_IS_FUNCTION
#else
template<class type_parameter_0_0> using is_function = std::is_function<type_parameter_0_0>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_ENABLE_SHARED_FROM_THIS
#undef BOOST_STL11_REGEX_MAP_NO_ENABLE_SHARED_FROM_THIS
#else
template<class _Tp> using enable_shared_from_this = std::enable_shared_from_this<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_MAKE_UNSIGNED
#undef BOOST_STL11_REGEX_MAP_NO_MAKE_UNSIGNED
#else
template<class _Tp> using make_unsigned = std::make_unsigned<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_ENABLE_IF
#undef BOOST_STL11_REGEX_MAP_NO_ENABLE_IF
#else
template<bool _0, class _Tp> using enable_if = std::enable_if<_0, _Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_REFERENCE_WRAPPER
#undef BOOST_STL11_REGEX_MAP_NO_REFERENCE_WRAPPER
#else
template<class _Tp> using reference_wrapper = std::reference_wrapper<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_SREGEX_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_SREGEX_ITERATOR
#else
using std::sregex_iterator;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_ADDRESSOF
#undef BOOST_STL11_REGEX_MAP_NO_ADDRESSOF
#else
using std::addressof;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_WREGEX
#undef BOOST_STL11_REGEX_MAP_NO_WREGEX
#else
using std::wregex;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_WSMATCH
#undef BOOST_STL11_REGEX_MAP_NO_WSMATCH
#else
using std::wsmatch;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_RVALUE_REFERENCE
#undef BOOST_STL11_REGEX_MAP_NO_IS_RVALUE_REFERENCE
#else
template<class type_parameter_0_0> using is_rvalue_reference = std::is_rvalue_reference<type_parameter_0_0>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_WCMATCH
#undef BOOST_STL11_REGEX_MAP_NO_WCMATCH
#else
using std::wcmatch;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_SEARCH
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_SEARCH
#else
using std::regex_search;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_CLASS
#undef BOOST_STL11_REGEX_MAP_NO_IS_CLASS
#else
template<class _Tp> using is_class = std::is_class<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_ADD_CONST
#undef BOOST_STL11_REGEX_MAP_NO_ADD_CONST
#else
template<class _Tp> using add_const = std::add_const<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_LVALUE_REFERENCE
#undef BOOST_STL11_REGEX_MAP_NO_IS_LVALUE_REFERENCE
#else
template<class type_parameter_0_0> using is_lvalue_reference = std::is_lvalue_reference<type_parameter_0_0>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_SUB_MATCH
#undef BOOST_STL11_REGEX_MAP_NO_SUB_MATCH
#else
template<class _BiIter> using sub_match = std::sub_match<_BiIter>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_BASIC_REGEX
#undef BOOST_STL11_REGEX_MAP_NO_BASIC_REGEX
#else
template<class _Ch_type, class _Rx_traits> using basic_regex = std::basic_regex<_Ch_type, _Rx_traits>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_BASIC_REGEX
#undef BOOST_STL11_REGEX_MAP_NO_BASIC_REGEX
#else
template<class type_parameter_0_0, class type_parameter_0_1> using basic_regex = std::basic_regex<type_parameter_0_0, type_parameter_0_1>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_IS_MEMBER_FUNCTION_POINTER
#undef BOOST_STL11_REGEX_MAP_NO_IS_MEMBER_FUNCTION_POINTER
#else
template<class _Tp> using is_member_function_pointer = std::is_member_function_pointer<_Tp>;
#endif
#ifdef BOOST_STL11_REGEX_MAP_NO_SMATCH
#undef BOOST_STL11_REGEX_MAP_NO_SMATCH
#else
using std::smatch;
#endif
BOOST_STL11_REGEX_MAP_NAMESPACE_END
#undef BOOST_STL11_REGEX_MAP_NAMESPACE_BEGIN
#undef BOOST_STL11_REGEX_MAP_NAMESPACE_END
