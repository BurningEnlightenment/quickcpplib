/* This is an automatically generated bindings file. Don't modify it! */
#if !defined(BOOST_STL11_THREAD_MAP_NAMESPACE_BEGIN) || !defined(BOOST_STL11_THREAD_MAP_NAMESPACE_END)
#error You need to define BOOST_STL11_THREAD_MAP_NAMESPACE_BEGIN and BOOST_STL11_THREAD_MAP_NAMESPACE_END to use this header file
#endif
#include <thread>
BOOST_STL11_THREAD_MAP_NAMESPACE_BEGIN
extern const char *boost_local_bind_in;
namespace this_thread { using std::this_thread::sleep_until; }
using std::get_deleter;
using std::const_pointer_cast;
template<class _Tp> using shared_ptr = std::shared_ptr<_Tp>;
using bad_function_call = std::bad_function_call;
using std::bind;
template<class _Tp> using is_placeholder = std::is_placeholder<_Tp>;
template<class _Tp> using is_bind_expression = std::is_bind_expression<_Tp>;
using std::ref;
template<class _Tp> using hash = std::hash<_Tp>;
using std::to_string;
using std::cref;
using bad_weak_ptr = std::bad_weak_ptr;
namespace this_thread { using std::this_thread::sleep_for; }
using std::make_move_iterator;
template<class _Tp> using reference_wrapper = std::reference_wrapper<_Tp>;
template<class _Tp> using add_pointer = std::add_pointer<_Tp>;
template<bool _0, class _Tp> using enable_if = std::enable_if<_0, _Tp>;
template<std::size_t _0, std::size_t _1> using aligned_storage = std::aligned_storage<_0, _1>;
template<class _Tp> using remove_extent = std::remove_extent<_Tp>;
template<class _Tp> using add_const = std::add_const<_Tp>;
template<class _R1, class _R2> using ratio_greater = std::ratio_greater<_R1, _R2>;
template<class _Tp> using remove_volatile = std::remove_volatile<_Tp>;
using std::exa;
template<class _Tp> using has_trivial_copy_constructor = std::has_trivial_copy_constructor<_Tp>;
template<class... _Tp> using common_type = std::common_type<_Tp...>;
template<class type_parameter_0_0> using is_function = std::is_function<type_parameter_0_0>;
template<class _Tp> using enable_shared_from_this = std::enable_shared_from_this<_Tp>;
template<class _Tp> using is_nothrow_move_assignable = std::is_nothrow_move_assignable<_Tp>;
namespace this_thread { using std::this_thread::get_id; }
using std::static_pointer_cast;
template<class _Tp> using add_cv = std::add_cv<_Tp>;
template<class _Base, class _Derived> using is_base_of = std::is_base_of<_Base, _Derived>;
template<class type_parameter_0_0, class type_parameter_0_1> using is_base_of = std::is_base_of<type_parameter_0_0, type_parameter_0_1>;
template<class type_parameter_0_0, class type_parameter_0_1> using is_same = std::is_same<type_parameter_0_0, type_parameter_0_1>;
template<class _From, class _To> using is_convertible = std::is_convertible<_From, _To>;
template<class _Tp> using is_class = std::is_class<_Tp>;
template<class type_parameter_0_0> using is_volatile = std::is_volatile<type_parameter_0_0>;
template<class _Tp> using is_enum = std::is_enum<_Tp>;
template<class _Tp> using is_member_function_pointer = std::is_member_function_pointer<_Tp>;
template<class type_parameter_0_0> using is_lvalue_reference = std::is_lvalue_reference<type_parameter_0_0>;
template<class _Tp> using is_pointer = std::is_pointer<_Tp>;
using thread = std::thread;
using std::addressof;
using std::next;
template<class _Signature> using result_of = std::result_of<_Signature>;
template<class _Tp> using is_pod = std::is_pod<_Tp>;
template<class type_parameter_0_0> using is_rvalue_reference = std::is_rvalue_reference<type_parameter_0_0>;
template<class type_parameter_0_0> using is_array = std::is_array<type_parameter_0_0>;
using std::kilo;
template<class _Tp> using is_floating_point = std::is_floating_point<_Tp>;
template<class _Tp> using is_integral = std::is_integral<_Tp>;
template<class _Tp> using remove_const = std::remove_const<_Tp>;
template<class _Tp> using add_volatile = std::add_volatile<_Tp>;
template<class _Tp> using is_unsigned = std::is_unsigned<_Tp>;
using std::true_type;
template<class _Tp> using weak_ptr = std::weak_ptr<_Tp>;
template<class _Tp, _Tp _1> using integral_constant = std::integral_constant<_Tp, _1>;
template<class _Tp> using is_fundamental = std::is_fundamental<_Tp>;
template<bool _0, class _Iftrue, class _Iffalse> using conditional = std::conditional<_0, _Iftrue, _Iffalse>;
template<bool _0, class type_parameter_0_1, class type_parameter_0_2> using conditional = std::conditional<_0, type_parameter_0_1, type_parameter_0_2>;
using std::micro;
template<class _Tp> using is_nothrow_move_constructible = std::is_nothrow_move_constructible<_Tp>;
template<class _Tp> using add_rvalue_reference = std::add_rvalue_reference<_Tp>;
template<class type_parameter_0_0> using add_rvalue_reference = std::add_rvalue_reference<type_parameter_0_0>;
template<class _R1, class _R2> using ratio_equal = std::ratio_equal<_R1, _R2>;
template<class _Tp> using is_scalar = std::is_scalar<_Tp>;
template<class _Tp> using is_void = std::is_void<_Tp>;
template<intmax_t _0, intmax_t _1> using ratio = std::ratio<_0, _1>;
template<class _Tp> using remove_cv = std::remove_cv<_Tp>;
template<class type_parameter_0_0> using remove_cv = std::remove_cv<type_parameter_0_0>;
using std::milli;
template<class _Tp> using is_arithmetic = std::is_arithmetic<_Tp>;
using std::mega;
template<class _Tp> using is_member_pointer = std::is_member_pointer<_Tp>;
template<class type_parameter_0_0> using is_member_pointer = std::is_member_pointer<type_parameter_0_0>;
using std::swap;
template<class _Tp> using is_signed = std::is_signed<_Tp>;
template<class _Tp> using alignment_of = std::alignment_of<_Tp>;
template<class _Tp> using is_reference = std::is_reference<_Tp>;
template<class _Tp> using is_abstract = std::is_abstract<_Tp>;
template<class _R1, class _R2> using ratio_not_equal = std::ratio_not_equal<_R1, _R2>;
using std::move;
template<class _R1, class _R2> using ratio_less_equal = std::ratio_less_equal<_R1, _R2>;
template<class _Tp> using remove_reference = std::remove_reference<_Tp>;
template<class type_parameter_0_0> using remove_reference = std::remove_reference<type_parameter_0_0>;
using std::pico;
template<class _Signature> using function = std::function<_Signature>;
template<class _R1, class _R2> using ratio_greater_equal = std::ratio_greater_equal<_R1, _R2>;
using std::atto;
using std::femto;
using std::nano;
using std::move_backward;
using std::centi;
using std::hecto;
using std::tera;
using std::peta;
using std::giga;
using std::forward;
template<class type_parameter_0_0> using is_const = std::is_const<type_parameter_0_0>;
template<class _Tp> using decay = std::decay<_Tp>;
using std::declval;
using std::false_type;
using std::deca;
using std::mem_fn;
template<class _Iterator> using move_iterator = std::move_iterator<_Iterator>;
namespace this_thread { using std::this_thread::yield; }
using std::dynamic_pointer_cast;
using std::deci;
template<class _R1, class _R2> using ratio_less = std::ratio_less<_R1, _R2>;
template<class _Tp> using is_union = std::is_union<_Tp>;
BOOST_STL11_THREAD_MAP_NAMESPACE_END
#undef BOOST_STL11_THREAD_MAP_NAMESPACE_BEGIN
#undef BOOST_STL11_THREAD_MAP_NAMESPACE_END
