/* This is an automatically generated bindings file. Don't modify it! */
#if !defined(BOOST_STL11_FUNCTIONAL_MAP_NAMESPACE_BEGIN) || !defined(BOOST_STL11_FUNCTIONAL_MAP_NAMESPACE_END)
#error You need to define BOOST_STL11_FUNCTIONAL_MAP_NAMESPACE_BEGIN and BOOST_STL11_FUNCTIONAL_MAP_NAMESPACE_END to use this header file
#endif
#include <boost/bind.hpp>
BOOST_STL11_FUNCTIONAL_MAP_NAMESPACE_BEGIN
extern const char *boost_local_bind_in;
#ifdef BOOST_STL11_FUNCTIONAL_MAP_NO_BIND
#undef BOOST_STL11_FUNCTIONAL_MAP_NO_BIND
#else
using boost::bind;
#endif
#ifdef BOOST_STL11_FUNCTIONAL_MAP_NO_IS_BIND_EXPRESSION
#undef BOOST_STL11_FUNCTIONAL_MAP_NO_IS_BIND_EXPRESSION
#else
template<class T> using is_bind_expression = boost::is_bind_expression<T>;
#endif
#ifdef BOOST_STL11_FUNCTIONAL_MAP_NO_IS_PLACEHOLDER
#undef BOOST_STL11_FUNCTIONAL_MAP_NO_IS_PLACEHOLDER
#else
template<class T> using is_placeholder = boost::is_placeholder<T>;
#endif
#ifdef BOOST_STL11_FUNCTIONAL_MAP_NO_MEM_FN
#undef BOOST_STL11_FUNCTIONAL_MAP_NO_MEM_FN
#else
using boost::mem_fn;
#endif
#ifdef BOOST_STL11_FUNCTIONAL_MAP_NO_REFERENCE_WRAPPER
#undef BOOST_STL11_FUNCTIONAL_MAP_NO_REFERENCE_WRAPPER
#else
template<class T> using reference_wrapper = boost::reference_wrapper<T>;
#endif
#ifdef BOOST_STL11_FUNCTIONAL_MAP_NO_ADDRESSOF
#undef BOOST_STL11_FUNCTIONAL_MAP_NO_ADDRESSOF
#else
using boost::addressof;
#endif
#ifdef BOOST_STL11_FUNCTIONAL_MAP_NO_REF
#undef BOOST_STL11_FUNCTIONAL_MAP_NO_REF
#else
using boost::ref;
#endif
#ifdef BOOST_STL11_FUNCTIONAL_MAP_NO_CREF
#undef BOOST_STL11_FUNCTIONAL_MAP_NO_CREF
#else
using boost::cref;
#endif
BOOST_STL11_FUNCTIONAL_MAP_NAMESPACE_END
#undef BOOST_STL11_FUNCTIONAL_MAP_NAMESPACE_BEGIN
#undef BOOST_STL11_FUNCTIONAL_MAP_NAMESPACE_END
