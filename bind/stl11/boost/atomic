/* This is an automatically generated bindings file. Don't modify it! */
#if !defined(BOOST_STL11_ATOMIC_MAP_NAMESPACE_BEGIN) || !defined(BOOST_STL11_ATOMIC_MAP_NAMESPACE_END)
#error You need to define BOOST_STL11_ATOMIC_MAP_NAMESPACE_BEGIN and BOOST_STL11_ATOMIC_MAP_NAMESPACE_END to use this header file
#endif
#include <boost/atomic.hpp>
BOOST_STL11_ATOMIC_MAP_NAMESPACE_BEGIN
extern const char *boost_bindlib_in;
using ::boost::memory_order;
  using ::boost::memory_order_relaxed;
  using ::boost::memory_order_acquire;
  using ::boost::memory_order_release;
  using ::boost::memory_order_acq_rel;
  using ::boost::memory_order_seq_cst;
  using ::boost::memory_order_consume;
  using ::boost::memory_order_relaxed;
  using ::boost::memory_order_acquire;
  using ::boost::memory_order_release;
  using ::boost::memory_order_acq_rel;
  using ::boost::memory_order_seq_cst;
  using ::boost::memory_order_consume;
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INTPTR_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INTPTR_T
#else
using ::boost::atomic_intptr_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INTMAX_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INTMAX_T
#else
using ::boost::atomic_intmax_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_FAST64_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_FAST64_T
#else
using ::boost::atomic_int_fast64_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_FAST32_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_FAST32_T
#else
using ::boost::atomic_int_fast32_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_SIZE_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_SIZE_T
#else
using ::boost::atomic_size_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_FAST16_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_FAST16_T
#else
using ::boost::atomic_uint_fast16_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_FAST8_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_FAST8_T
#else
using ::boost::atomic_uint_fast8_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_FAST8_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_FAST8_T
#else
using ::boost::atomic_int_fast8_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_LEAST64_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_LEAST64_T
#else
using ::boost::atomic_int_least64_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_LEAST32_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_LEAST32_T
#else
using ::boost::atomic_uint_least32_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_LEAST16_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_LEAST16_T
#else
using ::boost::atomic_uint_least16_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_FAST16_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_FAST16_T
#else
using ::boost::atomic_int_fast16_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UCHAR
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UCHAR
#else
using ::boost::atomic_uchar;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT
#else
using ::boost::atomic_uint;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINTPTR_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINTPTR_T
#else
using ::boost::atomic_uintptr_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_FAST32_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_FAST32_T
#else
using ::boost::atomic_uint_fast32_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_LEAST16_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_LEAST16_T
#else
using ::boost::atomic_int_least16_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_USHORT
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_USHORT
#else
using ::boost::atomic_ushort;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_FAST64_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_FAST64_T
#else
using ::boost::atomic_uint_fast64_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_FLAG
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_FLAG
#else
using atomic_flag = ::boost::atomic_flag;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_PTRDIFF_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_PTRDIFF_T
#else
using ::boost::atomic_ptrdiff_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_LEAST32_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_LEAST32_T
#else
using ::boost::atomic_int_least32_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_CHAR
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_CHAR
#else
using ::boost::atomic_char;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_CHAR16_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_CHAR16_T
#else
using ::boost::atomic_char16_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC
#else
template<class T> using atomic = ::boost::atomic<T>;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_THREAD_FENCE
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_THREAD_FENCE
#else
using ::boost::atomic_thread_fence;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_SHORT
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_SHORT
#else
using ::boost::atomic_short;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_LEAST64_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_LEAST64_T
#else
using ::boost::atomic_uint_least64_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_SIGNAL_FENCE
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_SIGNAL_FENCE
#else
using ::boost::atomic_signal_fence;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_ULONG
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_ULONG
#else
using ::boost::atomic_ulong;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_SCHAR
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_SCHAR
#else
using ::boost::atomic_schar;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_LONG
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_LONG
#else
using ::boost::atomic_long;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINTMAX_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINTMAX_T
#else
using ::boost::atomic_uintmax_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_CHAR32_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_CHAR32_T
#else
using ::boost::atomic_char32_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_ULLONG
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_ULLONG
#else
using ::boost::atomic_ullong;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_LLONG
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_LLONG
#else
using ::boost::atomic_llong;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_BOOL
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_BOOL
#else
using ::boost::atomic_bool;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_WCHAR_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_WCHAR_T
#else
using ::boost::atomic_wchar_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_LEAST8_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT_LEAST8_T
#else
using ::boost::atomic_int_least8_t;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_INT
#else
using ::boost::atomic_int;
#endif
#ifdef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_LEAST8_T
#undef BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_UINT_LEAST8_T
#else
using ::boost::atomic_uint_least8_t;
#endif
BOOST_STL11_ATOMIC_MAP_NAMESPACE_END
#undef BOOST_STL11_ATOMIC_MAP_NAMESPACE_BEGIN
#undef BOOST_STL11_ATOMIC_MAP_NAMESPACE_END
