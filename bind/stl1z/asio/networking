/* This is an automatically generated bindings file. Don't modify it! */
#if !defined(BOOST_STL1z_NETWORKING_MAP_NAMESPACE_BEGIN) || !defined(BOOST_STL1z_NETWORKING_MAP_NAMESPACE_END)
#error You need to define BOOST_STL1z_NETWORKING_MAP_NAMESPACE_BEGIN and BOOST_STL1z_NETWORKING_MAP_NAMESPACE_END to use this header file
#endif
#include <asio.hpp>
BOOST_STL1z_NETWORKING_MAP_NAMESPACE_BEGIN
extern const char *boost_bindlib_in;
// begin v4_mapped_t
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_V4_MAPPED_T
#undef BOOST_STL1z_NETWORKING_MAP_NO_V4_MAPPED_T
#else
namespace ip { using ::asio::ip::v4_mapped_t;  using ::asio::ip::v4_mapped;
 }
#endif
// end v4_mapped_t
// begin misc_errors
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MISC_ERRORS
#undef BOOST_STL1z_NETWORKING_MAP_NO_MISC_ERRORS
#else
namespace error { using ::asio::error::misc_errors;  using ::asio::error::already_open;
  using ::asio::error::eof;
  using ::asio::error::not_found;
  using ::asio::error::fd_set_failure;
 }
#endif
// end misc_errors
// begin addrinfo_errors
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ADDRINFO_ERRORS
#undef BOOST_STL1z_NETWORKING_MAP_NO_ADDRINFO_ERRORS
#else
namespace error { using ::asio::error::addrinfo_errors;  using ::asio::error::service_not_found;
  using ::asio::error::socket_type_not_supported;
 }
#endif
// end addrinfo_errors
// begin netdb_errors
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_NETDB_ERRORS
#undef BOOST_STL1z_NETWORKING_MAP_NO_NETDB_ERRORS
#else
namespace error { using ::asio::error::netdb_errors;  using ::asio::error::host_not_found;
  using ::asio::error::host_not_found_try_again;
  using ::asio::error::no_data;
  using ::asio::error::no_recovery;
 }
#endif
// end netdb_errors
// begin basic_errors
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ERRORS
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ERRORS
#else
namespace error { using ::asio::error::basic_errors;  using ::asio::error::access_denied;
  using ::asio::error::address_family_not_supported;
  using ::asio::error::address_in_use;
  using ::asio::error::already_connected;
  using ::asio::error::already_started;
  using ::asio::error::broken_pipe;
  using ::asio::error::connection_aborted;
  using ::asio::error::connection_refused;
  using ::asio::error::connection_reset;
  using ::asio::error::bad_descriptor;
  using ::asio::error::fault;
  using ::asio::error::host_unreachable;
  using ::asio::error::in_progress;
  using ::asio::error::interrupted;
  using ::asio::error::invalid_argument;
  using ::asio::error::message_size;
  using ::asio::error::name_too_long;
  using ::asio::error::network_down;
  using ::asio::error::network_reset;
  using ::asio::error::network_unreachable;
  using ::asio::error::no_descriptors;
  using ::asio::error::no_buffer_space;
  using ::asio::error::no_memory;
  using ::asio::error::no_permission;
  using ::asio::error::no_protocol_option;
  using ::asio::error::not_connected;
  using ::asio::error::not_socket;
  using ::asio::error::operation_aborted;
  using ::asio::error::operation_not_supported;
  using ::asio::error::shut_down;
  using ::asio::error::timed_out;
  using ::asio::error::try_again;
  using ::asio::error::would_block;
 }
#endif
// end basic_errors
// begin write_at
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_WRITE_AT
#undef BOOST_STL1z_NETWORKING_MAP_NO_WRITE_AT
#else
using ::asio::write_at;
#endif
// end write_at
// begin executor_arg_t
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_EXECUTOR_ARG_T
#undef BOOST_STL1z_NETWORKING_MAP_NO_EXECUTOR_ARG_T
#else
using executor_arg_t = ::asio::executor_arg_t;
#endif
// end executor_arg_t
// begin thread
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_THREAD
#undef BOOST_STL1z_NETWORKING_MAP_NO_THREAD
#else
using thread = ::asio::thread;
#endif
// end thread
// begin streambuf
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STREAMBUF
#undef BOOST_STL1z_NETWORKING_MAP_NO_STREAMBUF
#else
using ::asio::streambuf;
#endif
// end streambuf
// begin signal_set
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SIGNAL_SET
#undef BOOST_STL1z_NETWORKING_MAP_NO_SIGNAL_SET
#else
using ::asio::signal_set;
#endif
// end signal_set
// begin serial_port
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SERIAL_PORT
#undef BOOST_STL1z_NETWORKING_MAP_NO_SERIAL_PORT
#else
using ::asio::serial_port;
#endif
// end serial_port
// begin is_match_condition
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_IS_MATCH_CONDITION
#undef BOOST_STL1z_NETWORKING_MAP_NO_IS_MATCH_CONDITION
#else
template<class T> using is_match_condition = ::asio::is_match_condition<T>;
#endif
// end is_match_condition
// begin async_read_at
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_READ_AT
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_READ_AT
#else
using ::asio::async_read_at;
#endif
// end async_read_at
// begin read
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_READ
#undef BOOST_STL1z_NETWORKING_MAP_NO_READ
#else
using ::asio::read;
#endif
// end read
// begin basic_descriptor
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_DESCRIPTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_DESCRIPTOR
#else
namespace posix { template<class DescriptorService> using basic_descriptor = ::asio::posix::basic_descriptor<DescriptorService>; }
#endif
// end basic_descriptor
// begin datagram_protocol
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_DATAGRAM_PROTOCOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_DATAGRAM_PROTOCOL
#else
namespace local { using datagram_protocol = ::asio::local::datagram_protocol; }
#endif
// end datagram_protocol
// begin stream_descriptor
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_DESCRIPTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_DESCRIPTOR
#else
namespace posix { using ::asio::posix::stream_descriptor; }
#endif
// end stream_descriptor
// begin basic_endpoint
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ENDPOINT
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ENDPOINT
#else
namespace local { template<class Protocol> using basic_endpoint = ::asio::local::basic_endpoint<Protocol>; }
#endif
// end basic_endpoint
// begin read_until
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_READ_UNTIL
#undef BOOST_STL1z_NETWORKING_MAP_NO_READ_UNTIL
#else
using ::asio::read_until;
#endif
// end read_until
// begin is_read_buffered
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_IS_READ_BUFFERED
#undef BOOST_STL1z_NETWORKING_MAP_NO_IS_READ_BUFFERED
#else
template<class Stream> using is_read_buffered = ::asio::is_read_buffered<Stream>;
#endif
// end is_read_buffered
// begin v6_only
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_V6_ONLY
#undef BOOST_STL1z_NETWORKING_MAP_NO_V6_ONLY
#else
namespace ip { using ::asio::ip::v6_only; }
#endif
// end v6_only
// begin hops
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_HOPS
#undef BOOST_STL1z_NETWORKING_MAP_NO_HOPS
#else
namespace ip { namespace unicast { using ::asio::ip::unicast::hops; } }
#endif
// end hops
// begin udp
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_UDP
#undef BOOST_STL1z_NETWORKING_MAP_NO_UDP
#else
namespace ip { using udp = ::asio::ip::udp; }
#endif
// end udp
// begin tcp
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_TCP
#undef BOOST_STL1z_NETWORKING_MAP_NO_TCP
#else
namespace ip { using tcp = ::asio::ip::tcp; }
#endif
// end tcp
// begin enable_loopback
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ENABLE_LOOPBACK
#undef BOOST_STL1z_NETWORKING_MAP_NO_ENABLE_LOOPBACK
#else
namespace ip { namespace multicast { using ::asio::ip::multicast::enable_loopback; } }
#endif
// end enable_loopback
// begin hops
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_HOPS
#undef BOOST_STL1z_NETWORKING_MAP_NO_HOPS
#else
namespace ip { namespace multicast { using ::asio::ip::multicast::hops; } }
#endif
// end hops
// begin join_group
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_JOIN_GROUP
#undef BOOST_STL1z_NETWORKING_MAP_NO_JOIN_GROUP
#else
namespace ip { namespace multicast { using ::asio::ip::multicast::join_group; } }
#endif
// end join_group
// begin icmp
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ICMP
#undef BOOST_STL1z_NETWORKING_MAP_NO_ICMP
#else
namespace ip { using icmp = ::asio::ip::icmp; }
#endif
// end icmp
// begin basic_resolver
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER
#else
namespace ip { template<class InternetProtocol, class ResolverService> using basic_resolver = ::asio::ip::basic_resolver<InternetProtocol, ResolverService>; }
#endif
// end basic_resolver
// begin resolver_query_base
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_RESOLVER_QUERY_BASE
#undef BOOST_STL1z_NETWORKING_MAP_NO_RESOLVER_QUERY_BASE
#else
namespace ip { using resolver_query_base = ::asio::ip::resolver_query_base; }
#endif
// end resolver_query_base
// begin basic_resolver_entry
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER_ENTRY
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER_ENTRY
#else
namespace ip { template<class InternetProtocol> using basic_resolver_entry = ::asio::ip::basic_resolver_entry<InternetProtocol>; }
#endif
// end basic_resolver_entry
// begin basic_endpoint
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ENDPOINT
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ENDPOINT
#else
namespace ip { template<class InternetProtocol> using basic_endpoint = ::asio::ip::basic_endpoint<InternetProtocol>; }
#endif
// end basic_endpoint
// begin address
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS
#undef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS
#else
namespace ip { using address = ::asio::ip::address; }
#endif
// end address
// begin host_name
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_HOST_NAME
#undef BOOST_STL1z_NETWORKING_MAP_NO_HOST_NAME
#else
namespace ip { using ::asio::ip::host_name; }
#endif
// end host_name
// begin is_mutable_buffer_sequence
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_IS_MUTABLE_BUFFER_SEQUENCE
#undef BOOST_STL1z_NETWORKING_MAP_NO_IS_MUTABLE_BUFFER_SEQUENCE
#else
template<class T> using is_mutable_buffer_sequence = ::asio::is_mutable_buffer_sequence<T>;
#endif
// end is_mutable_buffer_sequence
// begin leave_group
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_LEAVE_GROUP
#undef BOOST_STL1z_NETWORKING_MAP_NO_LEAVE_GROUP
#else
namespace ip { namespace multicast { using ::asio::ip::multicast::leave_group; } }
#endif
// end leave_group
// begin address_v4
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS_V4
#undef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS_V4
#else
namespace ip { using address_v4 = ::asio::ip::address_v4; }
#endif
// end address_v4
// begin basic_resolver_iterator
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER_ITERATOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER_ITERATOR
#else
namespace ip { template<class InternetProtocol> using basic_resolver_iterator = ::asio::ip::basic_resolver_iterator<InternetProtocol>; }
#endif
// end basic_resolver_iterator
// begin socket_base
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SOCKET_BASE
#undef BOOST_STL1z_NETWORKING_MAP_NO_SOCKET_BASE
#else
using socket_base = ::asio::socket_base;
#endif
// end socket_base
// begin buffered_write_stream
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERED_WRITE_STREAM
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERED_WRITE_STREAM
#else
template<class Stream> using buffered_write_stream = ::asio::buffered_write_stream<Stream>;
#endif
// end buffered_write_stream
// begin wrap
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_WRAP
#undef BOOST_STL1z_NETWORKING_MAP_NO_WRAP
#else
using ::asio::wrap;
#endif
// end wrap
// begin make_work
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MAKE_WORK
#undef BOOST_STL1z_NETWORKING_MAP_NO_MAKE_WORK
#else
using ::asio::make_work;
#endif
// end make_work
// begin read_at
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_READ_AT
#undef BOOST_STL1z_NETWORKING_MAP_NO_READ_AT
#else
using ::asio::read_at;
#endif
// end read_at
// begin async_result
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_RESULT
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_RESULT
#else
template<class Handler> using async_result = ::asio::async_result<Handler>;
#endif
// end async_result
// begin basic_stream_socket
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_STREAM_SOCKET
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_STREAM_SOCKET
#else
template<class Protocol, class StreamSocketService> using basic_stream_socket = ::asio::basic_stream_socket<Protocol, StreamSocketService>;
#endif
// end basic_stream_socket
// begin asio_handler_is_continuation
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_IS_CONTINUATION
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_IS_CONTINUATION
#else
using ::asio::asio_handler_is_continuation;
#endif
// end asio_handler_is_continuation
// begin null_buffers
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_NULL_BUFFERS
#undef BOOST_STL1z_NETWORKING_MAP_NO_NULL_BUFFERS
#else
using null_buffers = ::asio::null_buffers;
#endif
// end null_buffers
// begin executor_work
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_EXECUTOR_WORK
#undef BOOST_STL1z_NETWORKING_MAP_NO_EXECUTOR_WORK
#else
template<class Executor> using executor_work = ::asio::executor_work<Executor>;
#endif
// end executor_work
// begin mutable_buffers_1
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MUTABLE_BUFFERS_1
#undef BOOST_STL1z_NETWORKING_MAP_NO_MUTABLE_BUFFERS_1
#else
using mutable_buffers_1 = ::asio::mutable_buffers_1;
#endif
// end mutable_buffers_1
// begin basic_socket_streambuf
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET_STREAMBUF
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET_STREAMBUF
#else
template<class Protocol, class StreamSocketService, class Time, class TimeTraits, class TimerService> using basic_socket_streambuf = ::asio::basic_socket_streambuf<Protocol, StreamSocketService, Time, TimeTraits, TimerService>;
#endif
// end basic_socket_streambuf
// begin make_address
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MAKE_ADDRESS
#undef BOOST_STL1z_NETWORKING_MAP_NO_MAKE_ADDRESS
#else
namespace ip { using ::asio::ip::make_address; }
#endif
// end make_address
// begin const_buffers_1
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_CONST_BUFFERS_1
#undef BOOST_STL1z_NETWORKING_MAP_NO_CONST_BUFFERS_1
#else
using const_buffers_1 = ::asio::const_buffers_1;
#endif
// end const_buffers_1
// begin is_write_buffered
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_IS_WRITE_BUFFERED
#undef BOOST_STL1z_NETWORKING_MAP_NO_IS_WRITE_BUFFERED
#else
template<class Stream> using is_write_buffered = ::asio::is_write_buffered<Stream>;
#endif
// end is_write_buffered
// begin asio_handler_invoke
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_INVOKE
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_INVOKE
#else
using ::asio::asio_handler_invoke;
#endif
// end asio_handler_invoke
// begin bad_executor
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BAD_EXECUTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_BAD_EXECUTOR
#else
using bad_executor = ::asio::bad_executor;
#endif
// end bad_executor
// begin basic_stream_descriptor
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_STREAM_DESCRIPTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_STREAM_DESCRIPTOR
#else
namespace posix { template<class StreamDescriptorService> using basic_stream_descriptor = ::asio::posix::basic_stream_descriptor<StreamDescriptorService>; }
#endif
// end basic_stream_descriptor
// begin get_associated_executor
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_GET_ASSOCIATED_EXECUTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_GET_ASSOCIATED_EXECUTOR
#else
using ::asio::get_associated_executor;
#endif
// end get_associated_executor
// begin asio_handler_deallocate
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_DEALLOCATE
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_DEALLOCATE
#else
using ::asio::asio_handler_deallocate;
#endif
// end asio_handler_deallocate
// begin basic_serial_port
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SERIAL_PORT
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SERIAL_PORT
#else
template<class SerialPortService> using basic_serial_port = ::asio::basic_serial_port<SerialPortService>;
#endif
// end basic_serial_port
// begin use_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_USE_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_USE_SERVICE
#else
using ::asio::use_service;
#endif
// end use_service
// begin basic_io_object
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_IO_OBJECT
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_IO_OBJECT
#else
template<class IoObjectService, bool _1> using basic_io_object = ::asio::basic_io_object<IoObjectService, _1>;
#endif
// end basic_io_object
// begin async_completion
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_COMPLETION
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_COMPLETION
#else
template<class Handler, class Signature> using async_completion = ::asio::async_completion<Handler, Signature>;
#endif
// end async_completion
// begin invalid_service_owner
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_INVALID_SERVICE_OWNER
#undef BOOST_STL1z_NETWORKING_MAP_NO_INVALID_SERVICE_OWNER
#else
using invalid_service_owner = ::asio::invalid_service_owner;
#endif
// end invalid_service_owner
// begin outbound_interface
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_OUTBOUND_INTERFACE
#undef BOOST_STL1z_NETWORKING_MAP_NO_OUTBOUND_INTERFACE
#else
namespace ip { namespace multicast { using ::asio::ip::multicast::outbound_interface; } }
#endif
// end outbound_interface
// begin execution_context
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_EXECUTION_CONTEXT
#undef BOOST_STL1z_NETWORKING_MAP_NO_EXECUTION_CONTEXT
#else
using execution_context = ::asio::execution_context;
#endif
// end execution_context
// begin post
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_POST
#undef BOOST_STL1z_NETWORKING_MAP_NO_POST
#else
using ::asio::post;
#endif
// end post
// begin buffers_end
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERS_END
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERS_END
#else
using ::asio::buffers_end;
#endif
// end buffers_end
// begin executor_wrapper
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_EXECUTOR_WRAPPER
#undef BOOST_STL1z_NETWORKING_MAP_NO_EXECUTOR_WRAPPER
#else
template<class T, class Executor> using executor_wrapper = ::asio::executor_wrapper<T, Executor>;
#endif
// end executor_wrapper
// begin async_read
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_READ
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_READ
#else
using ::asio::async_read;
#endif
// end async_read
// begin resolver_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_RESOLVER_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_RESOLVER_SERVICE
#else
namespace ip { template<class InternetProtocol> using resolver_service = ::asio::ip::resolver_service<InternetProtocol>; }
#endif
// end resolver_service
// begin const_buffer
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_CONST_BUFFER
#undef BOOST_STL1z_NETWORKING_MAP_NO_CONST_BUFFER
#else
using const_buffer = ::asio::const_buffer;
#endif
// end const_buffer
// begin io_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_IO_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_IO_SERVICE
#else
using io_service = ::asio::io_service;
#endif
// end io_service
// begin strand
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STRAND
#undef BOOST_STL1z_NETWORKING_MAP_NO_STRAND
#else
template<class Executor> using strand = ::asio::strand<Executor>;
#endif
// end strand
// begin buffered_read_stream
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERED_READ_STREAM
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERED_READ_STREAM
#else
template<class Stream> using buffered_read_stream = ::asio::buffered_read_stream<Stream>;
#endif
// end buffered_read_stream
// begin buffer
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER
#else
using ::asio::buffer;
#endif
// end buffer
// begin system_executor
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SYSTEM_EXECUTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_SYSTEM_EXECUTOR
#else
using system_executor = ::asio::system_executor;
#endif
// end system_executor
// begin transfer_exactly
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_TRANSFER_EXACTLY
#undef BOOST_STL1z_NETWORKING_MAP_NO_TRANSFER_EXACTLY
#else
using ::asio::transfer_exactly;
#endif
// end transfer_exactly
// begin connect_pair
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_CONNECT_PAIR
#undef BOOST_STL1z_NETWORKING_MAP_NO_CONNECT_PAIR
#else
namespace local { using ::asio::local::connect_pair; }
#endif
// end connect_pair
// begin executor
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_EXECUTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_EXECUTOR
#else
using executor = ::asio::executor;
#endif
// end executor
// begin basic_raw_socket
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RAW_SOCKET
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RAW_SOCKET
#else
template<class Protocol, class RawSocketService> using basic_raw_socket = ::asio::basic_raw_socket<Protocol, RawSocketService>;
#endif
// end basic_raw_socket
// begin waitable_timer_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_WAITABLE_TIMER_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_WAITABLE_TIMER_SERVICE
#else
template<class Clock, class WaitTraits> using waitable_timer_service = ::asio::waitable_timer_service<Clock, WaitTraits>;
#endif
// end waitable_timer_service
// begin is_executor
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_IS_EXECUTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_IS_EXECUTOR
#else
template<class T> using is_executor = ::asio::is_executor<T>;
#endif
// end is_executor
// begin error_category
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ERROR_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_ERROR_CATEGORY
#else
using error_category = ::asio::error_category;
#endif
// end error_category
// begin async_read_until
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_READ_UNTIL
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_READ_UNTIL
#else
using ::asio::async_read_until;
#endif
// end async_read_until
// begin raw_socket_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_RAW_SOCKET_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_RAW_SOCKET_SERVICE
#else
template<class Protocol> using raw_socket_service = ::asio::raw_socket_service<Protocol>;
#endif
// end raw_socket_service
// begin basic_socket
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET
#else
template<class Protocol, class SocketService> using basic_socket = ::asio::basic_socket<Protocol, SocketService>;
#endif
// end basic_socket
// begin handler_type
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_HANDLER_TYPE
#undef BOOST_STL1z_NETWORKING_MAP_NO_HANDLER_TYPE
#else
template<class CompletionToken, class Signature, class type_parameter_0_2> using handler_type = ::asio::handler_type<CompletionToken, Signature, type_parameter_0_2>;
#endif
// end handler_type
// begin uses_executor
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_USES_EXECUTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_USES_EXECUTOR
#else
template<class T, class Executor> using uses_executor = ::asio::uses_executor<T, Executor>;
#endif
// end uses_executor
// begin basic_datagram_socket
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_DATAGRAM_SOCKET
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_DATAGRAM_SOCKET
#else
template<class Protocol, class DatagramSocketService> using basic_datagram_socket = ::asio::basic_datagram_socket<Protocol, DatagramSocketService>;
#endif
// end basic_datagram_socket
// begin system_category
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SYSTEM_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_SYSTEM_CATEGORY
#else
using ::asio::system_category;
#endif
// end system_category
// begin asio_handler_allocate
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_ALLOCATE
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_ALLOCATE
#else
using ::asio::asio_handler_allocate;
#endif
// end asio_handler_allocate
// begin get_associated_allocator
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_GET_ASSOCIATED_ALLOCATOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_GET_ASSOCIATED_ALLOCATOR
#else
using ::asio::get_associated_allocator;
#endif
// end get_associated_allocator
// begin async_write_at
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_WRITE_AT
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_WRITE_AT
#else
using ::asio::async_write_at;
#endif
// end async_write_at
// begin basic_resolver_query
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER_QUERY
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER_QUERY
#else
namespace ip { template<class InternetProtocol> using basic_resolver_query = ::asio::ip::basic_resolver_query<InternetProtocol>; }
#endif
// end basic_resolver_query
// begin associated_allocator
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASSOCIATED_ALLOCATOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASSOCIATED_ALLOCATOR
#else
template<class T, class Allocator> using associated_allocator = ::asio::associated_allocator<T, Allocator>;
#endif
// end associated_allocator
// begin has_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_HAS_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_HAS_SERVICE
#else
using ::asio::has_service;
#endif
// end has_service
// begin connect
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_CONNECT
#undef BOOST_STL1z_NETWORKING_MAP_NO_CONNECT
#else
using ::asio::connect;
#endif
// end connect
// begin stream_protocol
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_PROTOCOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_PROTOCOL
#else
namespace local { using stream_protocol = ::asio::local::stream_protocol; }
#endif
// end stream_protocol
// begin basic_socket_acceptor
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET_ACCEPTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET_ACCEPTOR
#else
template<class Protocol, class SocketAcceptorService> using basic_socket_acceptor = ::asio::basic_socket_acceptor<Protocol, SocketAcceptorService>;
#endif
// end basic_socket_acceptor
// begin get_netdb_category
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_GET_NETDB_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_GET_NETDB_CATEGORY
#else
namespace error { using ::asio::error::get_netdb_category; }
#endif
// end get_netdb_category
// begin stream_descriptor_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_DESCRIPTOR_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_DESCRIPTOR_SERVICE
#else
namespace posix { using stream_descriptor_service = ::asio::posix::stream_descriptor_service; }
#endif
// end stream_descriptor_service
// begin raw_protocol
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_RAW_PROTOCOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_RAW_PROTOCOL
#else
namespace generic { using raw_protocol = ::asio::generic::raw_protocol; }
#endif
// end raw_protocol
// begin get_misc_category
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_GET_MISC_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_GET_MISC_CATEGORY
#else
namespace error { using ::asio::error::get_misc_category; }
#endif
// end get_misc_category
// begin buffer_size
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER_SIZE
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER_SIZE
#else
using ::asio::buffer_size;
#endif
// end buffer_size
// begin buffered_stream
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERED_STREAM
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERED_STREAM
#else
template<class Stream> using buffered_stream = ::asio::buffered_stream<Stream>;
#endif
// end buffered_stream
// begin service_already_exists
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SERVICE_ALREADY_EXISTS
#undef BOOST_STL1z_NETWORKING_MAP_NO_SERVICE_ALREADY_EXISTS
#else
using service_already_exists = ::asio::service_already_exists;
#endif
// end service_already_exists
// begin get_system_category
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_GET_SYSTEM_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_GET_SYSTEM_CATEGORY
#else
namespace error { using ::asio::error::get_system_category; }
#endif
// end get_system_category
// begin get_addrinfo_category
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_GET_ADDRINFO_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_GET_ADDRINFO_CATEGORY
#else
namespace error { using ::asio::error::get_addrinfo_category; }
#endif
// end get_addrinfo_category
// begin associated_executor
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASSOCIATED_EXECUTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASSOCIATED_EXECUTOR
#else
template<class T, class Executor> using associated_executor = ::asio::associated_executor<T, Executor>;
#endif
// end associated_executor
// begin enable_if
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ENABLE_IF
#undef BOOST_STL1z_NETWORKING_MAP_NO_ENABLE_IF
#else
template<bool _0, class Type> using enable_if = ::asio::enable_if<_0, Type>;
#endif
// end enable_if
// begin system_error
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SYSTEM_ERROR
#undef BOOST_STL1z_NETWORKING_MAP_NO_SYSTEM_ERROR
#else
using system_error = ::asio::system_error;
#endif
// end system_error
// begin make_error_code
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MAKE_ERROR_CODE
#undef BOOST_STL1z_NETWORKING_MAP_NO_MAKE_ERROR_CODE
#else
namespace error { using ::asio::error::make_error_code; }
#endif
// end make_error_code
// begin error_code
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ERROR_CODE
#undef BOOST_STL1z_NETWORKING_MAP_NO_ERROR_CODE
#else
using error_code = ::asio::error_code;
#endif
// end error_code
// begin buffer_cast
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER_CAST
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER_CAST
#else
using ::asio::buffer_cast;
#endif
// end buffer_cast
// begin buffer_copy
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER_COPY
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER_COPY
#else
using ::asio::buffer_copy;
#endif
// end buffer_copy
// begin bad_address_cast
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BAD_ADDRESS_CAST
#undef BOOST_STL1z_NETWORKING_MAP_NO_BAD_ADDRESS_CAST
#else
namespace ip { using bad_address_cast = ::asio::ip::bad_address_cast; }
#endif
// end bad_address_cast
// begin seq_packet_socket_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SEQ_PACKET_SOCKET_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_SEQ_PACKET_SOCKET_SERVICE
#else
template<class Protocol> using seq_packet_socket_service = ::asio::seq_packet_socket_service<Protocol>;
#endif
// end seq_packet_socket_service
// begin steady_timer
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STEADY_TIMER
#undef BOOST_STL1z_NETWORKING_MAP_NO_STEADY_TIMER
#else
using ::asio::steady_timer;
#endif
// end steady_timer
// begin thread_pool
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_THREAD_POOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_THREAD_POOL
#else
using thread_pool = ::asio::thread_pool;
#endif
// end thread_pool
// begin basic_seq_packet_socket
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SEQ_PACKET_SOCKET
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SEQ_PACKET_SOCKET
#else
template<class Protocol, class SeqPacketSocketService> using basic_seq_packet_socket = ::asio::basic_seq_packet_socket<Protocol, SeqPacketSocketService>;
#endif
// end basic_seq_packet_socket
// begin serial_port_base
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SERIAL_PORT_BASE
#undef BOOST_STL1z_NETWORKING_MAP_NO_SERIAL_PORT_BASE
#else
using serial_port_base = ::asio::serial_port_base;
#endif
// end serial_port_base
// begin basic_streambuf
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_STREAMBUF
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_STREAMBUF
#else
template<class Allocator> using basic_streambuf = ::asio::basic_streambuf<Allocator>;
#endif
// end basic_streambuf
// begin coroutine
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_COROUTINE
#undef BOOST_STL1z_NETWORKING_MAP_NO_COROUTINE
#else
using coroutine = ::asio::coroutine;
#endif
// end coroutine
// begin serial_port_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SERIAL_PORT_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_SERIAL_PORT_SERVICE
#else
using serial_port_service = ::asio::serial_port_service;
#endif
// end serial_port_service
// begin socket_acceptor_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SOCKET_ACCEPTOR_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_SOCKET_ACCEPTOR_SERVICE
#else
template<class Protocol> using socket_acceptor_service = ::asio::socket_acceptor_service<Protocol>;
#endif
// end socket_acceptor_service
// begin make_address_v4
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MAKE_ADDRESS_V4
#undef BOOST_STL1z_NETWORKING_MAP_NO_MAKE_ADDRESS_V4
#else
namespace ip { using ::asio::ip::make_address_v4; }
#endif
// end make_address_v4
// begin transfer_at_least
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_TRANSFER_AT_LEAST
#undef BOOST_STL1z_NETWORKING_MAP_NO_TRANSFER_AT_LEAST
#else
using ::asio::transfer_at_least;
#endif
// end transfer_at_least
// begin write
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_WRITE
#undef BOOST_STL1z_NETWORKING_MAP_NO_WRITE
#else
using ::asio::write;
#endif
// end write
// begin basic_signal_set
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SIGNAL_SET
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SIGNAL_SET
#else
template<class SignalSetService> using basic_signal_set = ::asio::basic_signal_set<SignalSetService>;
#endif
// end basic_signal_set
// begin signal_set_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SIGNAL_SET_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_SIGNAL_SET_SERVICE
#else
using signal_set_service = ::asio::signal_set_service;
#endif
// end signal_set_service
// begin stream_socket_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_SOCKET_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_SOCKET_SERVICE
#else
template<class Protocol> using stream_socket_service = ::asio::stream_socket_service<Protocol>;
#endif
// end stream_socket_service
// begin wait_traits
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_WAIT_TRAITS
#undef BOOST_STL1z_NETWORKING_MAP_NO_WAIT_TRAITS
#else
template<class Clock> using wait_traits = ::asio::wait_traits<Clock>;
#endif
// end wait_traits
// begin add_service
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ADD_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_ADD_SERVICE
#else
using ::asio::add_service;
#endif
// end add_service
// begin mutable_buffer
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MUTABLE_BUFFER
#undef BOOST_STL1z_NETWORKING_MAP_NO_MUTABLE_BUFFER
#else
using mutable_buffer = ::asio::mutable_buffer;
#endif
// end mutable_buffer
// begin basic_waitable_timer
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_WAITABLE_TIMER
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_WAITABLE_TIMER
#else
template<class Clock, class WaitTraits, class WaitableTimerService> using basic_waitable_timer = ::asio::basic_waitable_timer<Clock, WaitTraits, WaitableTimerService>;
#endif
// end basic_waitable_timer
// begin datagram_protocol
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_DATAGRAM_PROTOCOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_DATAGRAM_PROTOCOL
#else
namespace generic { using datagram_protocol = ::asio::generic::datagram_protocol; }
#endif
// end datagram_protocol
// begin basic_socket_iostream
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET_IOSTREAM
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET_IOSTREAM
#else
template<class Protocol, class StreamSocketService, class Time, class TimeTraits, class TimerService> using basic_socket_iostream = ::asio::basic_socket_iostream<Protocol, StreamSocketService, Time, TimeTraits, TimerService>;
#endif
// end basic_socket_iostream
// begin descriptor_base
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_DESCRIPTOR_BASE
#undef BOOST_STL1z_NETWORKING_MAP_NO_DESCRIPTOR_BASE
#else
namespace posix { using descriptor_base = ::asio::posix::descriptor_base; }
#endif
// end descriptor_base
// begin read_size_helper
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_READ_SIZE_HELPER
#undef BOOST_STL1z_NETWORKING_MAP_NO_READ_SIZE_HELPER
#else
using ::asio::read_size_helper;
#endif
// end read_size_helper
// begin is_const_buffer_sequence
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_IS_CONST_BUFFER_SEQUENCE
#undef BOOST_STL1z_NETWORKING_MAP_NO_IS_CONST_BUFFER_SEQUENCE
#else
template<class T> using is_const_buffer_sequence = ::asio::is_const_buffer_sequence<T>;
#endif
// end is_const_buffer_sequence
// begin transfer_all
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_TRANSFER_ALL
#undef BOOST_STL1z_NETWORKING_MAP_NO_TRANSFER_ALL
#else
using ::asio::transfer_all;
#endif
// end transfer_all
// begin seq_packet_protocol
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SEQ_PACKET_PROTOCOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_SEQ_PACKET_PROTOCOL
#else
namespace generic { using seq_packet_protocol = ::asio::generic::seq_packet_protocol; }
#endif
// end seq_packet_protocol
// begin async_write
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_WRITE
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_WRITE
#else
using ::asio::async_write;
#endif
// end async_write
// begin buffers_iterator
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERS_ITERATOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERS_ITERATOR
#else
template<class BufferSequence, class ByteType> using buffers_iterator = ::asio::buffers_iterator<BufferSequence, ByteType>;
#endif
// end buffers_iterator
// begin buffers_begin
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERS_BEGIN
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERS_BEGIN
#else
using ::asio::buffers_begin;
#endif
// end buffers_begin
// begin async_connect
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_CONNECT
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_CONNECT
#else
using ::asio::async_connect;
#endif
// end async_connect
// begin basic_endpoint
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ENDPOINT
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ENDPOINT
#else
namespace generic { template<class Protocol> using basic_endpoint = ::asio::generic::basic_endpoint<Protocol>; }
#endif
// end basic_endpoint
// begin stream_protocol
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_PROTOCOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_PROTOCOL
#else
namespace generic { using stream_protocol = ::asio::generic::stream_protocol; }
#endif
// end stream_protocol
// begin address_cast
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS_CAST
#undef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS_CAST
#else
namespace ip { using ::asio::ip::address_cast; }
#endif
// end address_cast
// begin address_v6
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS_V6
#undef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS_V6
#else
namespace ip { using address_v6 = ::asio::ip::address_v6; }
#endif
// end address_v6
// begin make_address_v6
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MAKE_ADDRESS_V6
#undef BOOST_STL1z_NETWORKING_MAP_NO_MAKE_ADDRESS_V6
#else
namespace ip { using ::asio::ip::make_address_v6; }
#endif
// end make_address_v6
BOOST_STL1z_NETWORKING_MAP_NAMESPACE_END
#undef BOOST_STL1z_NETWORKING_MAP_NAMESPACE_BEGIN
#undef BOOST_STL1z_NETWORKING_MAP_NAMESPACE_END
