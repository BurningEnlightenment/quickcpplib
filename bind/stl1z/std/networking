/* This is an automatically generated bindings file. Don't modify it! */
#if !defined(BOOST_STL1z_NETWORKING_MAP_NAMESPACE_BEGIN) || !defined(BOOST_STL1z_NETWORKING_MAP_NAMESPACE_END)
#error You need to define BOOST_STL1z_NETWORKING_MAP_NAMESPACE_BEGIN and BOOST_STL1z_NETWORKING_MAP_NAMESPACE_END to use this header file
#endif
#include <networking>
BOOST_STL1z_NETWORKING_MAP_NAMESPACE_BEGIN
extern const char *std::experimental_bindlib_in;
namespace error { using ::std::experimental::asio::error::misc_errors;  using ::std::experimental::asio::error::already_open;
  using ::std::experimental::asio::error::eof;
  using ::std::experimental::asio::error::not_found;
  using ::std::experimental::asio::error::fd_set_failure;
 }
namespace error { using ::std::experimental::asio::error::addrinfo_errors;  using ::std::experimental::asio::error::service_not_found;
  using ::std::experimental::asio::error::socket_type_not_supported;
 }
namespace error { using ::std::experimental::asio::error::netdb_errors;  using ::std::experimental::asio::error::host_not_found;
  using ::std::experimental::asio::error::host_not_found_try_again;
  using ::std::experimental::asio::error::no_data;
  using ::std::experimental::asio::error::no_recovery;
 }
namespace error { using ::std::experimental::asio::error::basic_errors;  using ::std::experimental::asio::error::access_denied;
  using ::std::experimental::asio::error::address_family_not_supported;
  using ::std::experimental::asio::error::address_in_use;
  using ::std::experimental::asio::error::already_connected;
  using ::std::experimental::asio::error::already_started;
  using ::std::experimental::asio::error::broken_pipe;
  using ::std::experimental::asio::error::connection_aborted;
  using ::std::experimental::asio::error::connection_refused;
  using ::std::experimental::asio::error::connection_reset;
  using ::std::experimental::asio::error::bad_descriptor;
  using ::std::experimental::asio::error::fault;
  using ::std::experimental::asio::error::host_unreachable;
  using ::std::experimental::asio::error::in_progress;
  using ::std::experimental::asio::error::interrupted;
  using ::std::experimental::asio::error::invalid_argument;
  using ::std::experimental::asio::error::message_size;
  using ::std::experimental::asio::error::name_too_long;
  using ::std::experimental::asio::error::network_down;
  using ::std::experimental::asio::error::network_reset;
  using ::std::experimental::asio::error::network_unreachable;
  using ::std::experimental::asio::error::no_descriptors;
  using ::std::experimental::asio::error::no_buffer_space;
  using ::std::experimental::asio::error::no_memory;
  using ::std::experimental::asio::error::no_permission;
  using ::std::experimental::asio::error::no_protocol_option;
  using ::std::experimental::asio::error::not_connected;
  using ::std::experimental::asio::error::not_socket;
  using ::std::experimental::asio::error::operation_aborted;
  using ::std::experimental::asio::error::operation_not_supported;
  using ::std::experimental::asio::error::shut_down;
  using ::std::experimental::asio::error::timed_out;
  using ::std::experimental::asio::error::try_again;
  using ::std::experimental::asio::error::would_block;
 }
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_WRITE_AT
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_WRITE_AT
#else
using ::std::experimental::asio::async_write_at;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_WRITE_AT
#undef BOOST_STL1z_NETWORKING_MAP_NO_WRITE_AT
#else
using ::std::experimental::asio::write_at;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STRAND
#undef BOOST_STL1z_NETWORKING_MAP_NO_STRAND
#else
using ::std::experimental::asio::strand;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_READ_UNTIL
#undef BOOST_STL1z_NETWORKING_MAP_NO_READ_UNTIL
#else
using ::std::experimental::asio::read_until;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_IS_MATCH_CONDITION
#undef BOOST_STL1z_NETWORKING_MAP_NO_IS_MATCH_CONDITION
#else
template<class T> using is_match_condition = ::std::experimental::asio::is_match_condition<T>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_READ_AT
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_READ_AT
#else
using ::std::experimental::asio::async_read_at;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_READ_AT
#undef BOOST_STL1z_NETWORKING_MAP_NO_READ_AT
#else
using ::std::experimental::asio::read_at;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_READ
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_READ
#else
using ::std::experimental::asio::async_read;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_DESCRIPTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_DESCRIPTOR
#else
namespace posix { using ::std::experimental::asio::posix::stream_descriptor; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_STREAM_DESCRIPTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_STREAM_DESCRIPTOR
#else
namespace posix { template<class StreamDescriptorService> using basic_stream_descriptor = ::std::experimental::asio::posix::basic_stream_descriptor<StreamDescriptorService>; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_DESCRIPTOR_BASE
#undef BOOST_STL1z_NETWORKING_MAP_NO_DESCRIPTOR_BASE
#else
namespace posix { using descriptor_base = ::std::experimental::asio::posix::descriptor_base; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SIGNAL_NUMBER
#undef BOOST_STL1z_NETWORKING_MAP_NO_SIGNAL_NUMBER
#else
namespace placeholders { using ::std::experimental::asio::placeholders::signal_number; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BYTES_TRANSFERRED
#undef BOOST_STL1z_NETWORKING_MAP_NO_BYTES_TRANSFERRED
#else
namespace placeholders { using ::std::experimental::asio::placeholders::bytes_transferred; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ERROR
#undef BOOST_STL1z_NETWORKING_MAP_NO_ERROR
#else
namespace placeholders { using ::std::experimental::asio::placeholders::error; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_PROTOCOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_PROTOCOL
#else
namespace local { using stream_protocol = ::std::experimental::asio::local::stream_protocol; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_DATAGRAM_PROTOCOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_DATAGRAM_PROTOCOL
#else
namespace local { using datagram_protocol = ::std::experimental::asio::local::datagram_protocol; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_DESCRIPTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_DESCRIPTOR
#else
namespace posix { template<class DescriptorService> using basic_descriptor = ::std::experimental::asio::posix::basic_descriptor<DescriptorService>; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_CONNECT_PAIR
#undef BOOST_STL1z_NETWORKING_MAP_NO_CONNECT_PAIR
#else
namespace local { using ::std::experimental::asio::local::connect_pair; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ENDPOINT
#undef BOOST_STL1z_NETWORKING_MAP_NO_ENDPOINT
#else
namespace local { namespace detail { using endpoint = ::std::experimental::asio::local::detail::endpoint; } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_V6_ONLY
#undef BOOST_STL1z_NETWORKING_MAP_NO_V6_ONLY
#else
namespace ip { using ::std::experimental::asio::ip::v6_only; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ITERATOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_ITERATOR
#else
namespace placeholders { using ::std::experimental::asio::placeholders::iterator; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_HOPS
#undef BOOST_STL1z_NETWORKING_MAP_NO_HOPS
#else
namespace ip { namespace unicast { using ::std::experimental::asio::ip::unicast::hops; } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_TCP
#undef BOOST_STL1z_NETWORKING_MAP_NO_TCP
#else
namespace ip { using tcp = ::std::experimental::asio::ip::tcp; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ENABLE_LOOPBACK
#undef BOOST_STL1z_NETWORKING_MAP_NO_ENABLE_LOOPBACK
#else
namespace ip { namespace multicast { using ::std::experimental::asio::ip::multicast::enable_loopback; } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SIGNAL_SET
#undef BOOST_STL1z_NETWORKING_MAP_NO_SIGNAL_SET
#else
using ::std::experimental::asio::signal_set;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_HOPS
#undef BOOST_STL1z_NETWORKING_MAP_NO_HOPS
#else
namespace ip { namespace multicast { using ::std::experimental::asio::ip::multicast::hops; } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_OUTBOUND_INTERFACE
#undef BOOST_STL1z_NETWORKING_MAP_NO_OUTBOUND_INTERFACE
#else
namespace ip { namespace multicast { using ::std::experimental::asio::ip::multicast::outbound_interface; } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SIGNAL_SET
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SIGNAL_SET
#else
template<class SignalSetService> using basic_signal_set = ::std::experimental::asio::basic_signal_set<SignalSetService>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SIGNAL_SET_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_SIGNAL_SET_SERVICE
#else
using signal_set_service = ::std::experimental::asio::signal_set_service;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERED_READ_STREAM
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERED_READ_STREAM
#else
template<class Stream> using buffered_read_stream = ::std::experimental::asio::buffered_read_stream<Stream>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_RAW_SOCKET_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_RAW_SOCKET_SERVICE
#else
template<class Protocol> using raw_socket_service = ::std::experimental::asio::raw_socket_service<Protocol>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_NETWORK_INTERFACE
#undef BOOST_STL1z_NETWORKING_MAP_NO_NETWORK_INTERFACE
#else
namespace ip { namespace detail { namespace socket_option { template<int _0, int _1, int _2, int _3> using network_interface = ::std::experimental::asio::ip::detail::socket_option::network_interface<_0, _1, _2, _3>; } } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SOCKET_BASE
#undef BOOST_STL1z_NETWORKING_MAP_NO_SOCKET_BASE
#else
using socket_base = ::std::experimental::asio::socket_base;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET_ACCEPTOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET_ACCEPTOR
#else
template<class Protocol, class SocketAcceptorService> using basic_socket_acceptor = ::std::experimental::asio::basic_socket_acceptor<Protocol, SocketAcceptorService>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER_COPY
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER_COPY
#else
using ::std::experimental::asio::buffer_copy;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_IS_CONTINUATION
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_IS_CONTINUATION
#else
using ::std::experimental::asio::asio_handler_is_continuation;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_NULL_BUFFERS
#undef BOOST_STL1z_NETWORKING_MAP_NO_NULL_BUFFERS
#else
using null_buffers = ::std::experimental::asio::null_buffers;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_IS_READ_BUFFERED
#undef BOOST_STL1z_NETWORKING_MAP_NO_IS_READ_BUFFERED
#else
template<class Stream> using is_read_buffered = ::std::experimental::asio::is_read_buffered<Stream>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_CONST_BUFFERS_1
#undef BOOST_STL1z_NETWORKING_MAP_NO_CONST_BUFFERS_1
#else
using const_buffers_1 = ::std::experimental::asio::const_buffers_1;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_DESCRIPTOR_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_DESCRIPTOR_SERVICE
#else
namespace posix { using stream_descriptor_service = ::std::experimental::asio::posix::stream_descriptor_service; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SEQ_PACKET_SOCKET_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_SEQ_PACKET_SOCKET_SERVICE
#else
template<class Protocol> using seq_packet_socket_service = ::std::experimental::asio::seq_packet_socket_service<Protocol>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MULTICAST_ENABLE_LOOPBACK
#undef BOOST_STL1z_NETWORKING_MAP_NO_MULTICAST_ENABLE_LOOPBACK
#else
namespace ip { namespace detail { namespace socket_option { template<int _0, int _1, int _2, int _3> using multicast_enable_loopback = ::std::experimental::asio::ip::detail::socket_option::multicast_enable_loopback<_0, _1, _2, _3>; } } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_ALLOCATE
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_ALLOCATE
#else
using ::std::experimental::asio::asio_handler_allocate;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RAW_SOCKET
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RAW_SOCKET
#else
template<class Protocol, class RawSocketService> using basic_raw_socket = ::std::experimental::asio::basic_raw_socket<Protocol, RawSocketService>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_TIME_TRAITS
#undef BOOST_STL1z_NETWORKING_MAP_NO_TIME_TRAITS
#else
template<class Time> using time_traits = ::std::experimental::asio::time_traits<Time>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ENDPOINT
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ENDPOINT
#else
namespace ip { template<class InternetProtocol> using basic_endpoint = ::std::experimental::asio::ip::basic_endpoint<InternetProtocol>; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SERIAL_PORT
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SERIAL_PORT
#else
template<class SerialPortService> using basic_serial_port = ::std::experimental::asio::basic_serial_port<SerialPortService>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER_ITERATOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER_ITERATOR
#else
namespace ip { template<class InternetProtocol> using basic_resolver_iterator = ::std::experimental::asio::ip::basic_resolver_iterator<InternetProtocol>; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER_CAST
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER_CAST
#else
using ::std::experimental::asio::buffer_cast;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_GET_SYSTEM_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_GET_SYSTEM_CATEGORY
#else
namespace error { using ::std::experimental::asio::error::get_system_category; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STREAMBUF
#undef BOOST_STL1z_NETWORKING_MAP_NO_STREAMBUF
#else
using ::std::experimental::asio::streambuf;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_DATAGRAM_PROTOCOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_DATAGRAM_PROTOCOL
#else
namespace generic { using datagram_protocol = ::std::experimental::asio::generic::datagram_protocol; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MUTABLE_BUFFERS_1
#undef BOOST_STL1z_NETWORKING_MAP_NO_MUTABLE_BUFFERS_1
#else
using mutable_buffers_1 = ::std::experimental::asio::mutable_buffers_1;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER_SIZE
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER_SIZE
#else
using ::std::experimental::asio::buffer_size;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_READ_UNTIL
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_READ_UNTIL
#else
using ::std::experimental::asio::async_read_until;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ADDRINFO_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_ADDRINFO_CATEGORY
#else
namespace error { namespace detail { using addrinfo_category = ::std::experimental::asio::error::detail::addrinfo_category; } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_CONST_BUFFER
#undef BOOST_STL1z_NETWORKING_MAP_NO_CONST_BUFFER
#else
using const_buffer = ::std::experimental::asio::const_buffer;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ADD_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_ADD_SERVICE
#else
using ::std::experimental::asio::add_service;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_SOCKET_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_SOCKET_SERVICE
#else
template<class Protocol> using stream_socket_service = ::std::experimental::asio::stream_socket_service<Protocol>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_RAW_PROTOCOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_RAW_PROTOCOL
#else
namespace generic { using raw_protocol = ::std::experimental::asio::generic::raw_protocol; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERED_STREAM
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERED_STREAM
#else
template<class Stream> using buffered_stream = ::std::experimental::asio::buffered_stream<Stream>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_DEALLOCATE
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_DEALLOCATE
#else
using ::std::experimental::asio::asio_handler_deallocate;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_GET_NETDB_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_GET_NETDB_CATEGORY
#else
namespace error { using ::std::experimental::asio::error::get_netdb_category; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_HANDLER_TYPE
#undef BOOST_STL1z_NETWORKING_MAP_NO_HANDLER_TYPE
#else
template<class Handler, class Signature> using handler_type = ::std::experimental::asio::handler_type<Handler, Signature>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_UDP
#undef BOOST_STL1z_NETWORKING_MAP_NO_UDP
#else
namespace ip { using udp = ::std::experimental::asio::ip::udp; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERS_BEGIN
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERS_BEGIN
#else
using ::std::experimental::asio::buffers_begin;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ENDPOINT
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ENDPOINT
#else
namespace local { template<class Protocol> using basic_endpoint = ::std::experimental::asio::local::basic_endpoint<Protocol>; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MAKE_ERROR_CODE
#undef BOOST_STL1z_NETWORKING_MAP_NO_MAKE_ERROR_CODE
#else
namespace error { using ::std::experimental::asio::error::make_error_code; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_JOIN_GROUP
#undef BOOST_STL1z_NETWORKING_MAP_NO_JOIN_GROUP
#else
namespace ip { namespace multicast { using ::std::experimental::asio::ip::multicast::join_group; } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MUTABLE_BUFFER
#undef BOOST_STL1z_NETWORKING_MAP_NO_MUTABLE_BUFFER
#else
using mutable_buffer = ::std::experimental::asio::mutable_buffer;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_IO_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_IO_SERVICE
#else
using io_service = ::std::experimental::asio::io_service;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_IS_WRITE_BUFFERED
#undef BOOST_STL1z_NETWORKING_MAP_NO_IS_WRITE_BUFFERED
#else
template<class Stream> using is_write_buffered = ::std::experimental::asio::is_write_buffered<Stream>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER_QUERY
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER_QUERY
#else
namespace ip { template<class InternetProtocol> using basic_resolver_query = ::std::experimental::asio::ip::basic_resolver_query<InternetProtocol>; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SEQ_PACKET_SOCKET
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SEQ_PACKET_SOCKET
#else
template<class Protocol, class SeqPacketSocketService> using basic_seq_packet_socket = ::std::experimental::asio::basic_seq_packet_socket<Protocol, SeqPacketSocketService>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_TRANSFER_AT_LEAST
#undef BOOST_STL1z_NETWORKING_MAP_NO_TRANSFER_AT_LEAST
#else
using ::std::experimental::asio::transfer_at_least;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ENABLE_IF
#undef BOOST_STL1z_NETWORKING_MAP_NO_ENABLE_IF
#else
template<bool _0, class Type> using enable_if = ::std::experimental::asio::enable_if<_0, Type>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SERIAL_PORT_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_SERIAL_PORT_SERVICE
#else
using serial_port_service = ::std::experimental::asio::serial_port_service;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_HAS_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_HAS_SERVICE
#else
using ::std::experimental::asio::has_service;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_USE_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_USE_SERVICE
#else
using ::std::experimental::asio::use_service;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SERIAL_PORT_BASE
#undef BOOST_STL1z_NETWORKING_MAP_NO_SERIAL_PORT_BASE
#else
using serial_port_base = ::std::experimental::asio::serial_port_base;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET_STREAMBUF
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET_STREAMBUF
#else
template<class Protocol, class StreamSocketService, class Time, class TimeTraits, class TimerService> using basic_socket_streambuf = ::std::experimental::asio::basic_socket_streambuf<Protocol, StreamSocketService, Time, TimeTraits, TimerService>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFER
#else
using ::std::experimental::asio::buffer;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MULTICAST_REQUEST
#undef BOOST_STL1z_NETWORKING_MAP_NO_MULTICAST_REQUEST
#else
namespace ip { namespace detail { namespace socket_option { template<int _0, int _1, int _2, int _3> using multicast_request = ::std::experimental::asio::ip::detail::socket_option::multicast_request<_0, _1, _2, _3>; } } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS_V4
#undef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS_V4
#else
namespace ip { using address_v4 = ::std::experimental::asio::ip::address_v4; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_RESOLVER_QUERY_BASE
#undef BOOST_STL1z_NETWORKING_MAP_NO_RESOLVER_QUERY_BASE
#else
namespace ip { using resolver_query_base = ::std::experimental::asio::ip::resolver_query_base; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SERVICE_ALREADY_EXISTS
#undef BOOST_STL1z_NETWORKING_MAP_NO_SERVICE_ALREADY_EXISTS
#else
using service_already_exists = ::std::experimental::asio::service_already_exists;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MISC_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_MISC_CATEGORY
#else
namespace error { namespace detail { using misc_category = ::std::experimental::asio::error::detail::misc_category; } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_IO_OBJECT
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_IO_OBJECT
#else
template<class IoObjectService, bool _1> using basic_io_object = ::std::experimental::asio::basic_io_object<IoObjectService, _1>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_DEADLINE_TIMER
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_DEADLINE_TIMER
#else
template<class Time, class TimeTraits, class TimerService> using basic_deadline_timer = ::std::experimental::asio::basic_deadline_timer<Time, TimeTraits, TimerService>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_GET_MISC_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_GET_MISC_CATEGORY
#else
namespace error { using ::std::experimental::asio::error::get_misc_category; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET_IOSTREAM
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET_IOSTREAM
#else
template<class Protocol, class StreamSocketService, class Time, class TimeTraits, class TimerService> using basic_socket_iostream = ::std::experimental::asio::basic_socket_iostream<Protocol, StreamSocketService, Time, TimeTraits, TimerService>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ENDPOINT
#undef BOOST_STL1z_NETWORKING_MAP_NO_ENDPOINT
#else
namespace generic { namespace detail { using endpoint = ::std::experimental::asio::generic::detail::endpoint; } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_INVALID_SERVICE_OWNER
#undef BOOST_STL1z_NETWORKING_MAP_NO_INVALID_SERVICE_OWNER
#else
using invalid_service_owner = ::std::experimental::asio::invalid_service_owner;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_STREAM_SOCKET
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_STREAM_SOCKET
#else
template<class Protocol, class StreamSocketService> using basic_stream_socket = ::std::experimental::asio::basic_stream_socket<Protocol, StreamSocketService>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_CONNECT
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_CONNECT
#else
using ::std::experimental::asio::async_connect;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_STREAMBUF
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_STREAMBUF
#else
template<class Allocator> using basic_streambuf = ::std::experimental::asio::basic_streambuf<Allocator>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_READ_SIZE_HELPER
#undef BOOST_STL1z_NETWORKING_MAP_NO_READ_SIZE_HELPER
#else
using ::std::experimental::asio::read_size_helper;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_WAITABLE_TIMER_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_WAITABLE_TIMER_SERVICE
#else
template<class Clock, class WaitTraits> using waitable_timer_service = ::std::experimental::asio::waitable_timer_service<Clock, WaitTraits>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_RESULT
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_RESULT
#else
template<class Handler> using async_result = ::std::experimental::asio::async_result<Handler>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERED_WRITE_STREAM
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERED_WRITE_STREAM
#else
template<class Stream> using buffered_write_stream = ::std::experimental::asio::buffered_write_stream<Stream>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_TRANSFER_ALL
#undef BOOST_STL1z_NETWORKING_MAP_NO_TRANSFER_ALL
#else
using ::std::experimental::asio::transfer_all;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_TRANSFER_EXACTLY
#undef BOOST_STL1z_NETWORKING_MAP_NO_TRANSFER_EXACTLY
#else
using ::std::experimental::asio::transfer_exactly;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_HOST_NAME
#undef BOOST_STL1z_NETWORKING_MAP_NO_HOST_NAME
#else
namespace ip { using ::std::experimental::asio::ip::host_name; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_GET_ADDRINFO_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_GET_ADDRINFO_CATEGORY
#else
namespace error { using ::std::experimental::asio::error::get_addrinfo_category; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_WRITE
#undef BOOST_STL1z_NETWORKING_MAP_NO_WRITE
#else
using ::std::experimental::asio::write;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_WRITE
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASYNC_WRITE
#else
using ::std::experimental::asio::async_write;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_NETDB_CATEGORY
#undef BOOST_STL1z_NETWORKING_MAP_NO_NETDB_CATEGORY
#else
namespace error { namespace detail { using netdb_category = ::std::experimental::asio::error::detail::netdb_category; } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER_ENTRY
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER_ENTRY
#else
namespace ip { template<class InternetProtocol> using basic_resolver_entry = ::std::experimental::asio::ip::basic_resolver_entry<InternetProtocol>; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERS_ITERATOR
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERS_ITERATOR
#else
template<class BufferSequence, class ByteType> using buffers_iterator = ::std::experimental::asio::buffers_iterator<BufferSequence, ByteType>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERS_END
#undef BOOST_STL1z_NETWORKING_MAP_NO_BUFFERS_END
#else
using ::std::experimental::asio::buffers_end;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_READ
#undef BOOST_STL1z_NETWORKING_MAP_NO_READ
#else
using ::std::experimental::asio::read;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_CONNECT
#undef BOOST_STL1z_NETWORKING_MAP_NO_CONNECT
#else
using ::std::experimental::asio::connect;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_WAITABLE_TIMER
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_WAITABLE_TIMER
#else
template<class Clock, class WaitTraits, class WaitableTimerService> using basic_waitable_timer = ::std::experimental::asio::basic_waitable_timer<Clock, WaitTraits, WaitableTimerService>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ICMP
#undef BOOST_STL1z_NETWORKING_MAP_NO_ICMP
#else
namespace ip { using icmp = ::std::experimental::asio::ip::icmp; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_UNICAST_HOPS
#undef BOOST_STL1z_NETWORKING_MAP_NO_UNICAST_HOPS
#else
namespace ip { namespace detail { namespace socket_option { template<int _0, int _1, int _2, int _3> using unicast_hops = ::std::experimental::asio::ip::detail::socket_option::unicast_hops<_0, _1, _2, _3>; } } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ENDPOINT
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_ENDPOINT
#else
namespace generic { template<class Protocol> using basic_endpoint = ::std::experimental::asio::generic::basic_endpoint<Protocol>; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_SOCKET
#else
template<class Protocol, class SocketService> using basic_socket = ::std::experimental::asio::basic_socket<Protocol, SocketService>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_INVOKE
#undef BOOST_STL1z_NETWORKING_MAP_NO_ASIO_HANDLER_INVOKE
#else
using ::std::experimental::asio::asio_handler_invoke;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SEQ_PACKET_PROTOCOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_SEQ_PACKET_PROTOCOL
#else
namespace generic { using seq_packet_protocol = ::std::experimental::asio::generic::seq_packet_protocol; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS
#undef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS
#else
namespace ip { using address = ::std::experimental::asio::ip::address; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_PROTOCOL
#undef BOOST_STL1z_NETWORKING_MAP_NO_STREAM_PROTOCOL
#else
namespace generic { using stream_protocol = ::std::experimental::asio::generic::stream_protocol; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SOCKET_ACCEPTOR_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_SOCKET_ACCEPTOR_SERVICE
#else
template<class Protocol> using socket_acceptor_service = ::std::experimental::asio::socket_acceptor_service<Protocol>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS_V6
#undef BOOST_STL1z_NETWORKING_MAP_NO_ADDRESS_V6
#else
namespace ip { using address_v6 = ::std::experimental::asio::ip::address_v6; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_ENDPOINT
#undef BOOST_STL1z_NETWORKING_MAP_NO_ENDPOINT
#else
namespace ip { namespace detail { using endpoint = ::std::experimental::asio::ip::detail::endpoint; } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_DATAGRAM_SOCKET
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_DATAGRAM_SOCKET
#else
template<class Protocol, class DatagramSocketService> using basic_datagram_socket = ::std::experimental::asio::basic_datagram_socket<Protocol, DatagramSocketService>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_RESOLVER_SERVICE
#undef BOOST_STL1z_NETWORKING_MAP_NO_RESOLVER_SERVICE
#else
namespace ip { template<class InternetProtocol> using resolver_service = ::std::experimental::asio::ip::resolver_service<InternetProtocol>; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_COROUTINE
#undef BOOST_STL1z_NETWORKING_MAP_NO_COROUTINE
#else
using coroutine = ::std::experimental::asio::coroutine;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER
#undef BOOST_STL1z_NETWORKING_MAP_NO_BASIC_RESOLVER
#else
namespace ip { template<class InternetProtocol, class ResolverService> using basic_resolver = ::std::experimental::asio::ip::basic_resolver<InternetProtocol, ResolverService>; }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_LEAVE_GROUP
#undef BOOST_STL1z_NETWORKING_MAP_NO_LEAVE_GROUP
#else
namespace ip { namespace multicast { using ::std::experimental::asio::ip::multicast::leave_group; } }
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_SERIAL_PORT
#undef BOOST_STL1z_NETWORKING_MAP_NO_SERIAL_PORT
#else
using ::std::experimental::asio::serial_port;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_WAIT_TRAITS
#undef BOOST_STL1z_NETWORKING_MAP_NO_WAIT_TRAITS
#else
template<class Clock> using wait_traits = ::std::experimental::asio::wait_traits<Clock>;
#endif
#ifdef BOOST_STL1z_NETWORKING_MAP_NO_MULTICAST_HOPS
#undef BOOST_STL1z_NETWORKING_MAP_NO_MULTICAST_HOPS
#else
namespace ip { namespace detail { namespace socket_option { template<int _0, int _1, int _2, int _3> using multicast_hops = ::std::experimental::asio::ip::detail::socket_option::multicast_hops<_0, _1, _2, _3>; } } }
#endif
BOOST_STL1z_NETWORKING_MAP_NAMESPACE_END
#undef BOOST_STL1z_NETWORKING_MAP_NAMESPACE_BEGIN
#undef BOOST_STL1z_NETWORKING_MAP_NAMESPACE_END
