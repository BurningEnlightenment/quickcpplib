/* scoped_undo.hpp
Call a lambda if a scope unwinds
(C) 2016 Niall Douglas http://www.nedprod.com/
File Created: Aug 2016


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef BOOSTLITE_SCOPED_UNDO_HPP
#define BOOSTLITE_SCOPED_UNDO_HPP

#include "config.hpp"

BOOSTLITE_NAMESPACE_BEGIN

namespace scoped_undo
{
  namespace detail
  {
    template <typename callable> class undo_impl;
  }
  template <typename callable> inline detail::undo_impl<callable> undoer(callable c);
  namespace detail
  {
    namespace _detail
    {
      template <typename T, bool iscomparable> struct is_nullptr
      {
        bool operator()(T c) const noexcept { return !c; }
      };
      template <typename T> struct is_nullptr<T, false>
      {
        bool operator()(T) const noexcept { return false; }
      };
    }
//! Compile-time safe detector of if \em v is nullptr (can cope with non-pointer convertibles)
#if defined(__GNUC__) && (BOOST_GCC < 41000 || defined(__MINGW32__))
    template <typename T> bool is_nullptr(T v) noexcept { return _detail::is_nullptr<T, std::is_constructible<bool, T>::value>()(std::forward<T>(v)); }
#else
    template <typename T> bool is_nullptr(T v) noexcept { return _detail::is_nullptr<T, std::is_trivially_constructible<bool, T>::value>()(std::forward<T>(v)); }
#endif

    template <typename callable> class undo_impl
    {
      template <typename _callable> friend undo_impl<_callable> scoped_undo::undoer(_callable c);
      bool _dismissed;
      callable _undoer;
      undo_impl() = delete;
      undo_impl(const undo_impl &) = delete;
      undo_impl &operator=(const undo_impl &) = delete;
      explicit undo_impl(callable &&c) noexcept : _dismissed(false), _undoer(std::move(c)) {}
      void _trigger()
      {
        if(!_dismissed && !is_nullptr(_undoer))
        {
          _undoer();
          _dismissed = true;
        }
      }

    public:
      undo_impl(undo_impl &&o) noexcept : _dismissed(o._dismissed), _undoer(std::move(o._undoer)) { o._dismissed = true; }
      undo_impl &operator=(undo_impl &&o) noexcept
      {
        _trigger();
        _dismissed = o._dismissed;
        _undoer = std::move(o._undoer);
        o._dismissed = true;
        return *this;
      }
      ~undo_impl() { _trigger(); }
      //! Returns if the Undoer is dismissed
      bool dismissed() const { return _dismissed; }
      //! Dismisses the Undoer
      void dismiss(bool d = true) { _dismissed = d; }
      //! Undismisses the Undoer
      void undismiss(bool d = true) { _dismissed = !d; }
    };
  }

  /*! \brief Alexandrescu style rollbacks, a la C++ 11.

  Example of usage:
  \code
  auto resetpos=undoer([&s]() { s.seekg(0, std::ios::beg); });
  ...
  resetpos.dismiss();
  \endcode

  \note Interesting factoid: This code is one of the oldest pieces of C++ Niall is
  still using. Been in continuous usage, in one form or another, since 2002!
  */
  template <typename callable> inline detail::undo_impl<callable> undoer(callable c)
  {
    // static_assert(!std::is_function<callable>::value && !std::is_member_function_pointer<callable>::value && !std::is_member_object_pointer<callable>::value && !has_call_operator<callable>::value, "Undoer applied to a type not providing a call operator");
    return detail::undo_impl<callable>(std::move(c));
  }
}

BOOSTLITE_NAMESPACE_END

#endif
