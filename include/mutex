/* This is an automatically generated bindings file. Don't modify it! */
#if !defined(BOOST_MUTEX_MAP_START_NAMESPACE) || !defined(BOOST_MUTEX_MAP_END_NAMESPACE)
#error You need to define BOOST_MUTEX_MAP_START_NAMESPACE and BOOST_MUTEX_MAP_END_NAMESPACE to use this header file
#endif
#include <mutex>
BOOST_MUTEX_MAP_START_NAMESPACE
template<class> using std::unique_lock;
template<class> using std::lock_guard;
using std::defer_lock_t;
using std::recursive_timed_mutex;
using std::timed_mutex;
using std::recursive_mutex;
template<class> using std::is_error_condition_enum;
template<class> using std::is_error_code_enum;
using std::system_error;
using std::error_condition;
using std::error_code;
using std::errc::value_too_large;
using std::errc::too_many_files_open;
using std::errc::text_file_busy;
using std::errc::stream_timeout;
using std::errc::state_not_recoverable;
using std::errc::result_out_of_range;
using std::errc::resource_unavailable_try_again;
using std::errc::permission_denied;
using std::errc::timed_out;
using std::errc::owner_dead;
using std::errc::operation_not_supported;
using std::errc::operation_not_permitted;
using std::errc::operation_in_progress;
using std::errc::operation_canceled;
using std::errc::not_supported;
using std::errc::not_connected;
using std::errc::not_a_stream;
using std::errc::not_a_directory;
using std::errc::no_such_device_or_address;
using std::errc::no_space_on_device;
using std::errc::no_protocol_option;
using std::errc::no_message;
using std::errc::no_message_available;
using std::errc::wrong_protocol_type;
using std::errc::no_link;
using std::errc::no_child_process;
using std::errc::no_buffer_space;
using std::errc::message_size;
using std::errc::io_error;
using std::errc::invalid_seek;
using std::errc::invalid_argument;
using std::errc::interrupted;
using std::errc::host_unreachable;
using std::errc::function_not_supported;
using std::errc::filename_too_long;
using std::errc::file_too_large;
using std::errc::executable_format_error;
using std::errc::directory_not_empty;
using std::errc::illegal_byte_sequence;
using std::errc::cross_device_link;
using std::errc::broken_pipe;
using std::errc::bad_message;
using std::errc::bad_file_descriptor;
using std::errc::bad_address;
using std::errc::argument_out_of_domain;
using std::errc::argument_list_too_long;
using std::errc::address_not_available;
using std::errc::address_in_use;
using std::errc::address_family_not_supported;
using std::bad_function_call;
template<class> using std::is_placeholder;
template<class> using std::is_bind_expression;
using std::float_denorm_style::denorm_present;
using std::float_denorm_style::denorm_absent;
using std::errc::file_exists;
using std::float_denorm_style::denorm_indeterminate;
using std::float_denorm_style;
using std::float_round_style::round_toward_neg_infinity;
using std::errc::too_many_symbolic_link_levels;
using std::float_round_style::round_toward_infinity;
using std::errc::no_such_file_or_directory;
using std::float_round_style::round_to_nearest;
using std::float_round_style::round_toward_zero;
using std::float_round_style::round_indeterminate;
using std::adopt_lock_t;
using std::float_round_style;
template<class> using std::function;
template<class, class> using std::ratio_greater_equal;
template<class, class> using std::ratio_greater;
using std::input_iterator_tag;
using std::errc::protocol_error;
template<class> using std::is_member_function_pointer;
template<class, class, class> using std::binary_function;
using std::errc::too_many_files_open_in_system;
template<class, class> using std::tuple_element;
using std::errc::no_such_device;
template<class, class> using std::is_nothrow_constructible;
template<class, class, class> using std::basic_string;
template<class> using std::tuple;
template<class> using std::reference_wrapper;
template<class> using std::add_pointer;
template<class> using std::logical_or;
template<class> using std::bit_and;
template<class> using std::remove_extent;
template<class> using std::make_signed;
template<class, class> using std::basic_istream;
template<class> using std::make_unsigned;
using std::mutex;
template<class> using std::underlying_type;
template<class> using std::add_volatile;
template<class> using std::add_const;
template<class, class> using std::num_get;
template<class> using std::remove_volatile;
using std::piecewise_construct_t;
template<class> using std::bit_not;
template<class> using std::has_virtual_destructor;
template<class> using std::initializer_list;
template<class> using std::iterator_traits;
template<class> using std::has_trivial_copy_constructor;
using std::errc::no_stream_resources;
using std::errc::device_or_resource_busy;
template<class> using std::common_type;
template<class> using std::is_function;
template<class> using std::is_literal_type;
using std::errc::read_only_file_system;
template<class> using std::divides;
template<class> using std::is_trivially_destructible;
using std::domain_error;
template<class> using std::is_nothrow_move_assignable;
using std::errc::operation_would_block;
template<class, class> using std::is_nothrow_assignable;
template<class> using std::is_copy_assignable;
template<class> using std::modulus;
template<class> using std::add_cv;
using std::random_access_iterator_tag;
template<class> using std::rank;
using std::errc::network_unreachable;
using std::errc::is_a_directory;
template<class> using std::is_nothrow_move_constructible;
template<class> using std::is_nothrow_destructible;
template<class, class> using std::is_convertible;
template<class> using std::is_default_constructible;
template<class> using std::is_volatile;
template<class> using std::is_enum;
template<class, class> using std::is_base_of;
template<class> using std::is_member_object_pointer;
using std::output_iterator_tag;
using std::errc::connection_already_in_progress;
template<intmax_t, intmax_t> using std::ratio;
template<class> using std::is_destructible;
template<class, class> using std::time_get;
template<class> using std::is_move_constructible;
template<class> using std::is_arithmetic;
template<class, class> using std::integral_constant;
template<class> using std::is_fundamental;
template<class> using std::tuple_size;
using std::error_category;
template<bool, class, class> using std::conditional;
template<class> using std::result_of;
using std::errc::not_enough_memory;
template<class> using std::is_polymorphic;
template<class> using std::remove_all_extents;
template<class> using std::is_null_pointer;
template<class> using std::allocator;
template<class> using std::add_rvalue_reference;
template<class> using std::is_move_assignable;
template<class, class> using std::basic_ios;
template<class> using std::collate;
using std::errc::connection_aborted;
template<class, class> using std::is_assignable;
template<class> using std::is_pointer;
template<class> using std::is_object;
template<class> using std::is_empty;
template<class, unsigned int> using std::extent;
template<class> using std::remove_cv;
template<class> using std::is_trivial;
using std::forward_iterator_tag;
template<class, class> using std::ratio_less;
template<class> using std::char_traits;
template<class> using std::has_trivial_default_constructor;
template<class, class> using std::ratio_not_equal;
template<class> using std::is_abstract;
template<class, class> using std::is_same;
template<class> using std::is_lvalue_reference;
template<class> using std::is_array;
template<class> using std::is_nothrow_copy_assignable;
template<class> using std::is_copy_constructible;
template<class> using std::is_pod;
template<class> using std::is_nothrow_copy_constructible;
template<class, class, class> using std::const_mem_fun1_t;
using std::out_of_range;
template<class> using std::is_void;
template<class> using std::is_scalar;
template<class> using std::has_trivial_copy_assign;
template<class, class> using std::money_put;
template<class, bool> using std::moneypunct_byname;
template<class> using std::is_standard_layout;
using std::once_flag;
template<class> using std::add_lvalue_reference;
template<class> using std::back_insert_iterator;
template<class, class> using std::time_put_byname;
template<class> using std::binary_negate;
template<class> using std::is_compound;
template<class> using std::is_reference;
template<class, class> using std::basic_streambuf;
using std::messages_base;
template<class> using std::alignment_of;
template<class> using std::is_signed;
using std::try_to_lock_t;
template<class> using std::is_unsigned;
template<class, class> using std::ratio_less_equal;
template<class> using std::remove_reference;
using std::errc::no_lock_available;
template<class, class> using std::istreambuf_iterator;
using std::errc::inappropriate_io_control_operation;
template<class> using std::remove_pointer;
using std::ctype_base;
template<class, bool> using std::moneypunct;
template<class, class> using std::const_mem_fun_ref_t;
template<class, class, class> using std::mem_fun1_ref_t;
using std::overflow_error;
template<class, class> using std::is_constructible;
template<class, class> using std::const_mem_fun_t;
using std::errc::connection_reset;
template<class, class, class, class, class> using std::iterator;
using std::errc::not_a_socket;
template<class> using std::collate_byname;
template<class> using std::is_union;
using std::length_error;
template<class> using std::pointer_traits;
template<class> using std::reverse_iterator;
template<class> using std::unary_negate;
template<class> using std::remove_const;
template<class> using std::front_insert_iterator;
template<class> using std::is_class;
template<class> using std::fpos;
template<class> using std::bit_xor;
using std::ios_base;
template<class, class> using std::basic_ostream;
template<class> using std::equal_to;
template<class> using std::messages;
template<class, class> using std::basic_iostream;
template<class, class, class> using std::basic_stringbuf;
template<class, class, class> using std::basic_istringstream;
template<class, class, class> using std::basic_ostringstream;
using std::allocator_arg_t;
template<class> using std::is_integral;
template<class, class, class> using std::basic_stringstream;
template<class, class> using std::basic_filebuf;
template<class> using std::less_equal;
template<class> using std::minus;
template<class> using std::is_rvalue_reference;
template<class, class> using std::basic_ifstream;
using std::errc::already_connected;
template<class, class> using std::pair;
template<class, class> using std::basic_ofstream;
template<class, class> using std::basic_fstream;
using std::locale;
template<class> using std::is_floating_point;
template<class> using std::ctype;
using std::errc::protocol_not_supported;
template<class> using std::is_member_pointer;
template<class> using std::ctype_byname;
template<class> using std::greater;
template<class, class> using std::unary_function;
using std::codecvt_base;
template<class, class, class> using std::codecvt_byname;
template<class, class> using std::num_put;
template<class> using std::numpunct;
template<class> using std::not_equal_to;
template<class> using std::numpunct_byname;
using std::time_base;
template<class, class> using std::time_get_byname;
template<class, class> using std::time_put;
template<class> using std::binder2nd;
using std::errc::network_reset;
template<class> using std::messages_byname;
using std::errc::no_such_process;
template<class> using std::plus;
template<class> using std::insert_iterator;
using std::runtime_error;
template<class, class, class> using std::codecvt;
template<class> using std::multiplies;
using std::errc;
template<class> using std::negate;
template<class> using std::less;
template<class> using std::greater_equal;
using std::errc::resource_deadlock_would_occur;
template<class> using std::logical_and;
using std::bidirectional_iterator_tag;
template<class> using std::logical_not;
template<class> using std::is_const;
template<class> using std::decay;
template<class> using std::bit_or;
using std::errc::connection_refused;
template<class> using std::numeric_limits;
template<class, class> using std::pointer_to_unary_function;
template<class, class, class> using std::pointer_to_binary_function;
using std::errc::identifier_removed;
template<class, class> using std::money_get;
template<class, class> using std::mem_fun_t;
template<class, class> using std::ostreambuf_iterator;
template<class, class> using std::mem_fun_ref_t;
template<class> using std::move_iterator;
template<class, class, class> using std::mem_fun1_t;
using std::range_error;
template<class, class, class> using std::const_mem_fun1_ref_t;
using std::errc::network_down;
template<class> using std::is_nothrow_default_constructible;
template<class> using std::binder1st;
template<class> using std::hash;
using std::logic_error;
using std::errc::too_many_links;
template<bool, class> using std::enable_if;
template<class, class> using std::aligned_storage;
template<class, class> using std::array;
using std::money_base;
using std::invalid_argument;
template<class, class> using std::uses_allocator;
using std::underflow_error;
using std::errc::destination_address_required;
template<class, class> using std::ratio_equal;
BOOST_MUTEX_MAP_END_NAMESPACE
#undef BOOST_MUTEX_MAP_START_NAMESPACE
#undef BOOST_MUTEX_MAP_END_NAMESPACE
