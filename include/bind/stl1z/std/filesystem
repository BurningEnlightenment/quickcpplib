/* This is an automatically generated bindings file. Don't modify it! */
#ifndef BOOSTLITE_BIND_STD_FILESYSTEM_HPP
#define BOOSTLITE_BIND_STD_FILESYSTEM_HPP

#ifdef __has_include
#if __has_include(<experimental/filesystem>)
#include <experimental/filesystem>
#else
#include <filesystem>
#endif
#else
#include <filesystem>
#endif
namespace boost_lite { namespace bind { namespace std { namespace filesystem {
extern const char *boost_bindlib_in;
using ::std::tr2::sys::copy_options;
using ::std::tr2::sys::perms;
using ::std::tr2::sys::file_type;
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_FILESYSTEM_ERROR
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_FILESYSTEM_ERROR
#else
using filesystem_error = ::std::tr2::sys::filesystem_error;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_CHANGE_EXTENSION
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_CHANGE_EXTENSION
#else
using ::std::tr2::sys::change_extension;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_WRECURSIVE_DIRECTORY_ITERATOR
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_WRECURSIVE_DIRECTORY_ITERATOR
#else
using ::std::tr2::sys::wrecursive_directory_iterator;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_RECURSIVE_DIRECTORY_ITERATOR
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_RECURSIVE_DIRECTORY_ITERATOR
#else
using recursive_directory_iterator = ::std::tr2::sys::recursive_directory_iterator;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_DIRECTORY_ITERATOR
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_DIRECTORY_ITERATOR
#else
using directory_iterator = ::std::tr2::sys::directory_iterator;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_UNIQUE_PATH
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_UNIQUE_PATH
#else
using ::std::tr2::sys::unique_path;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_TEMP_DIRECTORY_PATH
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_TEMP_DIRECTORY_PATH
#else
using ::std::tr2::sys::temp_directory_path;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_SYSTEM_COMPLETE
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_SYSTEM_COMPLETE
#else
using ::std::tr2::sys::system_complete;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_EXTENSION
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_EXTENSION
#else
using ::std::tr2::sys::extension;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_SPACE
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_SPACE
#else
using ::std::tr2::sys::space;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_RENAME
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_RENAME
#else
using ::std::tr2::sys::rename;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_READ_SYMLINK
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_READ_SYMLINK
#else
using ::std::tr2::sys::read_symlink;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_CANONICAL
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_CANONICAL
#else
using ::std::tr2::sys::canonical;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_EXISTS
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_EXISTS
#else
using ::std::tr2::sys::exists;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_IS_REGULAR_FILE
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_IS_REGULAR_FILE
#else
using ::std::tr2::sys::is_regular_file;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_TYPE_PRESENT
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_TYPE_PRESENT
#else
using ::std::tr2::sys::type_present;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_PORTABLE_FILE_NAME
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_PORTABLE_FILE_NAME
#else
using ::std::tr2::sys::portable_file_name;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_PORTABLE_DIRECTORY_NAME
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_PORTABLE_DIRECTORY_NAME
#else
using ::std::tr2::sys::portable_directory_name;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_CURRENT_PATH
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_CURRENT_PATH
#else
using ::std::tr2::sys::current_path;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_CREATE_DIRECTORY
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_CREATE_DIRECTORY
#else
using ::std::tr2::sys::create_directory;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_PATH
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_PATH
#else
using path = ::std::tr2::sys::path;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_DIRECTORY_ENTRY
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_DIRECTORY_ENTRY
#else
using directory_entry = ::std::tr2::sys::directory_entry;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_IS_OTHER
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_IS_OTHER
#else
using ::std::tr2::sys::is_other;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_IS_DIRECTORY
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_IS_DIRECTORY
#else
using ::std::tr2::sys::is_directory;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_SYMLINK_STATUS
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_SYMLINK_STATUS
#else
using ::std::tr2::sys::symlink_status;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_REMOVE
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_REMOVE
#else
using ::std::tr2::sys::remove;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_IS_SYMLINK
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_IS_SYMLINK
#else
using ::std::tr2::sys::is_symlink;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_FILE_STATUS
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_FILE_STATUS
#else
using file_status = ::std::tr2::sys::file_status;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_STATUS_KNOWN
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_STATUS_KNOWN
#else
using ::std::tr2::sys::status_known;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_FILE_SIZE
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_FILE_SIZE
#else
using ::std::tr2::sys::file_size;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_HARD_LINK_COUNT
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_HARD_LINK_COUNT
#else
using ::std::tr2::sys::hard_link_count;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_PORTABLE_POSIX_NAME
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_PORTABLE_POSIX_NAME
#else
using ::std::tr2::sys::portable_posix_name;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_LEXICOGRAPHICAL_COMPARE
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_LEXICOGRAPHICAL_COMPARE
#else
using ::std::tr2::sys::lexicographical_compare;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_SWAP
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_SWAP
#else
using ::std::tr2::sys::swap;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_EQUIVALENT
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_EQUIVALENT
#else
using ::std::tr2::sys::equivalent;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_HASH_VALUE
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_HASH_VALUE
#else
using ::std::tr2::sys::hash_value;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_WINDOWS_NAME
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_WINDOWS_NAME
#else
using ::std::tr2::sys::windows_name;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_COPY
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_COPY
#else
using ::std::tr2::sys::copy;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_PORTABLE_NAME
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_PORTABLE_NAME
#else
using ::std::tr2::sys::portable_name;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_SPACE_INFO
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_SPACE_INFO
#else
using space_info = ::std::tr2::sys::space_info;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_IS_EMPTY
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_IS_EMPTY
#else
using ::std::tr2::sys::is_empty;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_BASENAME
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_BASENAME
#else
using ::std::tr2::sys::basename;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_COMPLETE
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_COMPLETE
#else
using ::std::tr2::sys::complete;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_STATUS
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_STATUS
#else
using ::std::tr2::sys::status;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_RESIZE_FILE
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_RESIZE_FILE
#else
using ::std::tr2::sys::resize_file;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_IS_REGULAR
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_IS_REGULAR
#else
using ::std::tr2::sys::is_regular;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_CREATE_DIRECTORIES
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_CREATE_DIRECTORIES
#else
using ::std::tr2::sys::create_directories;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_REMOVE_ALL
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_REMOVE_ALL
#else
using ::std::tr2::sys::remove_all;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_INITIAL_PATH
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_INITIAL_PATH
#else
using ::std::tr2::sys::initial_path;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_PERMISSIONS_PRESENT
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_PERMISSIONS_PRESENT
#else
using ::std::tr2::sys::permissions_present;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_COPY_FILE
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_COPY_FILE
#else
using ::std::tr2::sys::copy_file;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_CODECVT_ERROR_CATEGORY
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_CODECVT_ERROR_CATEGORY
#else
using ::std::tr2::sys::codecvt_error_category;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_CREATE_SYMLINK
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_CREATE_SYMLINK
#else
using ::std::tr2::sys::create_symlink;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_WPATH
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_WPATH
#else
using ::std::tr2::sys::wpath;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_ABSOLUTE
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_ABSOLUTE
#else
using ::std::tr2::sys::absolute;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_COPY_SYMLINK
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_COPY_SYMLINK
#else
using ::std::tr2::sys::copy_symlink;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_CREATE_DIRECTORY_SYMLINK
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_CREATE_DIRECTORY_SYMLINK
#else
using ::std::tr2::sys::create_directory_symlink;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_SYMBOLIC_LINK_EXISTS
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_SYMBOLIC_LINK_EXISTS
#else
using ::std::tr2::sys::symbolic_link_exists;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_COPY_DIRECTORY
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_COPY_DIRECTORY
#else
using ::std::tr2::sys::copy_directory;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_CREATE_HARD_LINK
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_CREATE_HARD_LINK
#else
using ::std::tr2::sys::create_hard_link;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_LAST_WRITE_TIME
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_LAST_WRITE_TIME
#else
using ::std::tr2::sys::last_write_time;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_NATIVE
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_NATIVE
#else
using ::std::tr2::sys::native;
#endif
#ifdef BOOST_STL1z_FILESYSTEM_MAP_NO_PERMISSIONS
#undef BOOST_STL1z_FILESYSTEM_MAP_NO_PERMISSIONS
#else
using ::std::tr2::sys::permissions;
#endif
} } } } // namespace

#endif
