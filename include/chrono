/* This is an automatically generated bindings file. Don't modify it! */
#if !defined(BOOST_STL11_MAP_START_NAMESPACE) || !defined(BOOST_STL11_MAP_END_NAMESPACE)
#error You need to define BOOST_STL11_MAP_START_NAMESPACE and BOOST_STL11_MAP_END_NAMESPACE to use this header file
#endif
#include "boostmacros.hpp"
#include <chrono>
BOOST_STL11_MAP_START_NAMESPACE
template<class _R1, class _R2> using ratio_greater_equal = std::ratio_greater_equal<_R1, _R2>;
template<class _Tp> using remove_reference = std::remove_reference<_Tp>;
template<class type_parameter_0_0> using remove_reference = std::remove_reference<type_parameter_0_0>;
template<class _Tp> using is_unsigned = std::is_unsigned<_Tp>;
template<class _Tp> using is_signed = std::is_signed<_Tp>;
template<class _Tp> using is_reference = std::is_reference<_Tp>;
template<class _Tp> using is_scalar = std::is_scalar<_Tp>;
template<class type_parameter_0_0> using is_rvalue_reference = std::is_rvalue_reference<type_parameter_0_0>;
template<class type_parameter_0_0> using is_array = std::is_array<type_parameter_0_0>;
template<class type_parameter_0_0> using is_lvalue_reference = std::is_lvalue_reference<type_parameter_0_0>;
template<class _Tp> using is_floating_point = std::is_floating_point<_Tp>;
template<class type_parameter_0_0, class type_parameter_0_1> using is_same = std::is_same<type_parameter_0_0, type_parameter_0_1>;
template<class _Tp> using is_abstract = std::is_abstract<_Tp>;
template<intmax_t _0, intmax_t _1> using ratio = std::ratio<_0, _1>;
template<class _Tp> using is_void = std::is_void<_Tp>;
template<class _Tp> using remove_cv = std::remove_cv<_Tp>;
template<class type_parameter_0_0> using remove_cv = std::remove_cv<type_parameter_0_0>;
template<class _Tp> using is_empty = std::is_empty<_Tp>;
template<class _Tp> using is_pointer = std::is_pointer<_Tp>;
template<class _Tp> using is_member_pointer = std::is_member_pointer<_Tp>;
template<class type_parameter_0_0> using is_member_pointer = std::is_member_pointer<type_parameter_0_0>;
template<class type_parameter_0_0> using is_const = std::is_const<type_parameter_0_0>;
template<class _Tp, _Tp _1> using integral_constant = std::integral_constant<_Tp, _1>;
template<class _Tp> using is_arithmetic = std::is_arithmetic<_Tp>;
template<class _Tp> using is_integral = std::is_integral<_Tp>;
template<class _Tp> using is_member_function_pointer = std::is_member_function_pointer<_Tp>;
template<class _Tp> using is_enum = std::is_enum<_Tp>;
template<class _Tp> using is_class = std::is_class<_Tp>;
template<class _Tp> using is_nothrow_move_constructible = std::is_nothrow_move_constructible<_Tp>;
template<class _Tp> using is_nothrow_move_assignable = std::is_nothrow_move_assignable<_Tp>;
template<class _Tp> using has_trivial_copy_constructor = std::has_trivial_copy_constructor<_Tp>;
template<class _From, class _To> using is_convertible = std::is_convertible<_From, _To>;
template<class _R1, class _R2> using ratio_less = std::ratio_less<_R1, _R2>;
template<class _Tp> using is_pod = std::is_pod<_Tp>;
template<class type_parameter_0_0> using is_volatile = std::is_volatile<type_parameter_0_0>;
template<bool _0, class _Tp> using enable_if = std::enable_if<_0, _Tp>;
template<class _Tp> using add_rvalue_reference = std::add_rvalue_reference<_Tp>;
template<class type_parameter_0_0> using add_rvalue_reference = std::add_rvalue_reference<type_parameter_0_0>;
template<class _R1, class _R2> using ratio_greater = std::ratio_greater<_R1, _R2>;
template<class... _Tp> using common_type = std::common_type<_Tp...>;
template<class _R1, class _R2> using ratio_equal = std::ratio_equal<_R1, _R2>;
template<class _R1, class _R2> using ratio_not_equal = std::ratio_not_equal<_R1, _R2>;
template<class _R1, class _R2> using ratio_less_equal = std::ratio_less_equal<_R1, _R2>;
BOOST_STL11_MAP_END_NAMESPACE
