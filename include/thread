/* This is an automatically generated bindings file. Don't modify it! */
#if !defined(BOOST_THREAD_MAP_START_NAMESPACE) || !defined(BOOST_THREAD_MAP_END_NAMESPACE)
#error You need to define BOOST_THREAD_MAP_START_NAMESPACE and BOOST_THREAD_MAP_END_NAMESPACE to use this header file
#endif
#include <thread>
BOOST_THREAD_MAP_START_NAMESPACE
template<class> using std::auto_ptr_ref;
template<class> using std::shared_ptr;
using std::bad_weak_ptr;
template<class, class> using std::unique_ptr;
template<class> using std::default_delete;
template<class> using std::auto_ptr;
template<class, class> using std::raw_storage_iterator;
template<class> using std::allocator_traits;
using std::bad_function_call;
template<class> using std::is_placeholder;
template<class> using std::is_bind_expression;
using std::allocator_arg_t;
using std::range_error;
using std::out_of_range;
using std::domain_error;
using std::logic_error;
template<class> using std::hash;
template<class> using std::messages_byname;
template<class, bool> using std::moneypunct_byname;
using std::float_round_style::round_indeterminate;
template<class> using std::function;
template<class, class> using std::ratio_greater_equal;
template<class, class> using std::basic_fstream;
template<class> using std::add_cv;
using std::random_access_iterator_tag;
template<class, class> using std::ratio_equal;
template<class, class> using std::ratio_greater;
template<class> using std::add_const;
template<class, class> using std::num_get;
template<class> using std::reference_wrapper;
template<class> using std::add_pointer;
template<class> using std::logical_or;
template<class, class> using std::array;
template<bool, class> using std::enable_if;
template<class, class> using std::aligned_storage;
template<class> using std::bit_and;
template<class> using std::remove_extent;
template<class> using std::make_signed;
template<class, class> using std::basic_istream;
template<class> using std::make_unsigned;
using std::float_round_style::round_toward_neg_infinity;
template<class> using std::underlying_type;
template<class> using std::add_volatile;
template<class> using std::remove_volatile;
template<class> using std::has_virtual_destructor;
template<class> using std::has_trivial_copy_constructor;
template<class> using std::common_type;
template<class> using std::is_function;
template<class> using std::enable_shared_from_this;
template<class> using std::is_literal_type;
template<class> using std::divides;
template<class> using std::is_trivially_destructible;
template<class> using std::is_nothrow_move_assignable;
template<class, class> using std::is_nothrow_assignable;
template<class> using std::is_copy_assignable;
template<class> using std::modulus;
template<class, class> using std::is_nothrow_constructible;
template<class, class> using std::tuple_element;
template<class, class, class> using std::basic_string;
template<class> using std::rank;
template<class> using std::is_nothrow_move_constructible;
using std::float_round_style::round_toward_zero;
template<class> using std::is_nothrow_destructible;
template<class, class> using std::is_convertible;
template<class> using std::is_default_constructible;
template<class> using std::is_volatile;
template<class> using std::is_enum;
template<class> using std::is_member_function_pointer;
template<class, class, class> using std::binary_function;
using std::float_round_style::round_toward_infinity;
template<class, class> using std::is_base_of;
using std::float_round_style;
using std::float_round_style::round_to_nearest;
template<class> using std::is_member_object_pointer;
template<class> using std::is_destructible;
template<class, class> using std::time_get;
template<class> using std::is_move_constructible;
template<class> using std::is_arithmetic;
template<class, class> using std::integral_constant;
template<class> using std::is_fundamental;
template<bool, class, class> using std::conditional;
template<class> using std::result_of;
template<class> using std::is_polymorphic;
template<class> using std::remove_all_extents;
template<class> using std::is_null_pointer;
template<class> using std::add_rvalue_reference;
template<class> using std::allocator;
template<class> using std::is_move_assignable;
template<class, class> using std::basic_ios;
template<class> using std::collate;
template<class, class> using std::is_assignable;
template<class> using std::is_pointer;
template<class> using std::is_object;
template<class> using std::is_empty;
template<class, unsigned int> using std::extent;
template<class> using std::remove_cv;
template<intmax_t, intmax_t> using std::ratio;
using std::output_iterator_tag;
template<class> using std::is_trivial;
using std::forward_iterator_tag;
using std::runtime_error;
template<class> using std::insert_iterator;
template<class, class> using std::ratio_not_equal;
template<class> using std::is_abstract;
template<class, class> using std::is_same;
template<class> using std::is_lvalue_reference;
template<class> using std::is_array;
template<class> using std::is_nothrow_copy_assignable;
template<class> using std::is_copy_constructible;
template<class> using std::is_pod;
template<class> using std::is_nothrow_copy_constructible;
template<class, class, class> using std::const_mem_fun1_t;
template<class> using std::is_void;
template<class> using std::is_scalar;
template<class> using std::messages;
template<class> using std::equal_to;
using std::messages_base;
template<class, class> using std::basic_streambuf;
template<class> using std::has_trivial_copy_assign;
template<class, class> using std::money_put;
template<class> using std::is_standard_layout;
template<class> using std::add_lvalue_reference;
template<class> using std::binary_negate;
template<class> using std::back_insert_iterator;
template<class, class> using std::time_put_byname;
template<class> using std::is_compound;
template<class> using std::is_reference;
template<class> using std::alignment_of;
template<class> using std::is_signed;
template<class> using std::is_unsigned;
template<class, class> using std::ratio_less_equal;
template<class> using std::remove_reference;
template<class, class> using std::istreambuf_iterator;
template<class> using std::remove_pointer;
template<class, class> using std::const_mem_fun_ref_t;
template<class, class, class> using std::mem_fun1_ref_t;
using std::ctype_base;
template<class, bool> using std::moneypunct;
using std::overflow_error;
template<class, class> using std::is_constructible;
using std::float_denorm_style;
template<class> using std::is_const;
template<class> using std::decay;
template<class> using std::bit_or;
using std::float_denorm_style::denorm_indeterminate;
template<class> using std::binder2nd;
template<class, class> using std::time_put;
template<class> using std::weak_ptr;
using std::float_denorm_style::denorm_absent;
using std::float_denorm_style::denorm_present;
template<class> using std::is_member_pointer;
template<class> using std::ctype_byname;
template<class> using std::plus;
template<class> using std::less_equal;
template<class> using std::minus;
template<class, class> using std::basic_filebuf;
template<class> using std::negate;
template<class> using std::not_equal_to;
template<class> using std::numpunct;
template<class, class> using std::unary_function;
template<class> using std::greater;
template<class> using std::less;
template<class> using std::greater_equal;
template<class> using std::logical_and;
template<class> using std::bit_not;
using std::piecewise_construct_t;
template<class> using std::unary_negate;
template<class> using std::reverse_iterator;
template<class> using std::numeric_limits;
template<class, class> using std::pointer_to_unary_function;
template<class, class, class> using std::pointer_to_binary_function;
template<class, class> using std::money_get;
template<class, class> using std::mem_fun_t;
template<class, class> using std::const_mem_fun_t;
template<class> using std::owner_less;
template<class> using std::logical_not;
using std::bidirectional_iterator_tag;
template<class> using std::move_iterator;
template<class, class, class> using std::mem_fun1_t;
template<class, class, class> using std::const_mem_fun1_ref_t;
template<class> using std::is_nothrow_default_constructible;
template<class> using std::binder1st;
template<class> using std::tuple;
template<class, class> using std::basic_ofstream;
template<class, class> using std::pair;
template<class> using std::initializer_list;
template<class> using std::iterator_traits;
template<class> using std::tuple_size;
using std::underflow_error;
template<class, class> using std::uses_allocator;
template<class, class> using std::ratio_less;
template<class> using std::has_trivial_default_constructor;
template<class> using std::char_traits;
using std::input_iterator_tag;
template<class, class, class, class, class> using std::iterator;
template<class> using std::collate_byname;
using std::length_error;
template<class> using std::is_union;
template<class> using std::pointer_traits;
template<class> using std::remove_const;
template<class> using std::front_insert_iterator;
template<class, class> using std::mem_fun_ref_t;
template<class, class> using std::ostreambuf_iterator;
template<class> using std::is_class;
template<class> using std::fpos;
template<class> using std::bit_xor;
using std::ios_base;
template<class, class> using std::basic_ostream;
template<class, class> using std::basic_iostream;
template<class, class, class> using std::basic_stringbuf;
template<class, class, class> using std::basic_istringstream;
template<class, class, class> using std::basic_ostringstream;
template<class> using std::is_integral;
template<class, class, class> using std::basic_stringstream;
template<class> using std::is_rvalue_reference;
template<class, class> using std::basic_ifstream;
using std::locale;
template<class> using std::is_floating_point;
template<class> using std::ctype;
using std::codecvt_base;
template<class> using std::multiplies;
template<class, class, class> using std::codecvt;
template<class, class, class> using std::codecvt_byname;
template<class, class> using std::num_put;
using std::thread;
template<class> using std::numpunct_byname;
using std::time_base;
template<class, class> using std::time_get_byname;
using std::invalid_argument;
using std::money_base;
BOOST_THREAD_MAP_END_NAMESPACE
#undef BOOST_THREAD_MAP_START_NAMESPACE
#undef BOOST_THREAD_MAP_END_NAMESPACE
