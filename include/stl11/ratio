/* This is an automatically generated bindings file. Don't modify it! */
#if !defined(BOOST_STL11_MAP_BEGIN_NAMESPACE) || !defined(BOOST_STL11_MAP_END_NAMESPACE)
#error You need to define BOOST_STL11_MAP_BEGIN_NAMESPACE and BOOST_STL11_MAP_END_NAMESPACE to use this header file
#endif
#include <ratio>
BOOST_STL11_MAP_BEGIN_NAMESPACE
using std::peta;
using std::tera;
using std::hecto;
using std::deci;
using std::centi;
using std::nano;
using std::femto;
using std::atto;
template<class _R1, class _R2> using ratio_greater_equal = std::ratio_greater_equal<_R1, _R2>;
using std::pico;
template<class _R1, class _R2> using ratio_less = std::ratio_less<_R1, _R2>;
template<class _R1, class _R2> using ratio_not_equal = std::ratio_not_equal<_R1, _R2>;
using std::mega;
using std::milli;
using std::deca;
template<intmax_t _0, intmax_t _1> using ratio = std::ratio<_0, _1>;
template<class _R1, class _R2> using ratio_equal = std::ratio_equal<_R1, _R2>;
template<class _Tp, _Tp _1> using integral_constant = std::integral_constant<_Tp, _1>;
using std::true_type;
using std::micro;
using std::giga;
using std::kilo;
template<class _R1, class _R2> using ratio_less_equal = std::ratio_less_equal<_R1, _R2>;
using std::false_type;
using std::exa;
template<class _R1, class _R2> using ratio_greater = std::ratio_greater<_R1, _R2>;
template<bool _0, class _Tp> using enable_if = std::enable_if<_0, _Tp>;
BOOST_STL11_MAP_END_NAMESPACE
