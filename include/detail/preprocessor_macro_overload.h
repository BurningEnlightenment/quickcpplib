/* preprocessor_macro_overload.h
MSVC capable preprocessor macro overloading
(C) 2014 Niall Douglas http://www.nedprod.com/
File Created: Aug 2014


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef BOOST_BINDLIB_PREPROCESSOR_MACRO_OVERLOAD_H
#define BOOST_BINDLIB_PREPROCESSOR_MACRO_OVERLOAD_H

#define BOOST_BINDLIB_GLUE(x, y) x y

#define BOOST_BINDLIB_RETURN_ARG_COUNT(_1_, _2_, _3_, _4_, _5_, _6_, _7_, _8_, count, ...) count
#define BOOST_BINDLIB_EXPAND_ARGS(args) BOOST_BINDLIB_RETURN_ARG_COUNT args
#define BOOST_BINDLIB_COUNT_ARGS_MAX8(...) BOOST_BINDLIB_EXPAND_ARGS((__VA_ARGS__, 8, 7, 6, 5, 4, 3, 2, 1, 0))

#define BOOST_BINDLIB_OVERLOAD_MACRO2(name, count) name##count
#define BOOST_BINDLIB_OVERLOAD_MACRO1(name, count) BOOST_BINDLIB_OVERLOAD_MACRO2(name, count)
#define BOOST_BINDLIB_OVERLOAD_MACRO(name, count) BOOST_BINDLIB_OVERLOAD_MACRO1(name, count)

#define BOOST_BINDLIB_CALL_OVERLOAD(name, ...) BOOST_BINDLIB_GLUE(BOOST_BINDLIB_OVERLOAD_MACRO(name, BOOST_BINDLIB_COUNT_ARGS_MAX8(__VA_ARGS__)), (__VA_ARGS__))

#define BOOST_BINDLIB_GLUE_(x, y) x y

#define BOOST_BINDLIB_RETURN_ARG_COUNT_(_1_, _2_, _3_, _4_, _5_, _6_, _7_, _8_, count, ...) count
#define BOOST_BINDLIB_EXPAND_ARGS_(args) BOOST_BINDLIB_RETURN_ARG_COUNT_ args
#define BOOST_BINDLIB_COUNT_ARGS_MAX8_(...) BOOST_BINDLIB_EXPAND_ARGS_((__VA_ARGS__, 8, 7, 6, 5, 4, 3, 2, 1, 0))

#define BOOST_BINDLIB_OVERLOAD_MACRO2_(name, count) name##count
#define BOOST_BINDLIB_OVERLOAD_MACRO1_(name, count) BOOST_BINDLIB_OVERLOAD_MACRO2_(name, count)
#define BOOST_BINDLIB_OVERLOAD_MACRO_(name, count) BOOST_BINDLIB_OVERLOAD_MACRO1_(name, count)

#define BOOST_BINDLIB_CALL_OVERLOAD_(name, ...) BOOST_BINDLIB_GLUE_(BOOST_BINDLIB_OVERLOAD_MACRO_(name, BOOST_BINDLIB_COUNT_ARGS_MAX8_(__VA_ARGS__)), (__VA_ARGS__))

#endif
