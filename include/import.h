/* import.hpp
Convenience macros for importing local namespace binds
(C) 2014 Niall Douglas http://www.nedprod.com/
File Created: Aug 2014


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef BOOST_BINDLIB_IMPORT_HPP
#define BOOST_BINDLIB_IMPORT_HPP

#ifndef BOOST_BINDLIB_DISABLE_NAMESPACE_MODIFIERS
# ifdef __has_feature
#  if !__has_feature(cxx_inline_namespaces)
#   define BOOST_BINDLIB_DISABLE_NAMESPACE_MODIFIERS
#  endif
# else
#  if defined(_MSC_VER) && _MSC_VER < 1900 // < VS14
#   define BOOST_BINDLIB_DISABLE_NAMESPACE_MODIFIERS
#  endif
#  if defined(__GNUC__) && (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__) < 40400
#   define BOOST_BINDLIB_DISABLE_NAMESPACE_MODIFIERS
#  endif
# endif
#endif

/* 2014-10-9 ned: I lost today figuring out the below. I really hate the C preprocessor now.
 * 
 * Anyway, infinity = 8. It's easy to expand below if needed.
 */
#include "detail/preprocessor_macro_overload.h"

#define BOOST_BINDLIB_STRINGIZE(a) #a
#define BOOST_BINDLIB_NAMESPACE_VERSION8(a, b, c, d, e, f, g, h) a ## _ ## b ## _ ## c ## _ ## d ## _ ## e ## _ ## f ## _ ## g ## _ ## h
#define BOOST_BINDLIB_NAMESPACE_VERSION7(a, b, c, d, e, f, g) a ## _ ## b ## _ ## c ## _ ## d ## _ ## e ## _ ## f ## _ ## g
#define BOOST_BINDLIB_NAMESPACE_VERSION6(a, b, c, d, e, f) a ## _ ## b ## _ ## c ## _ ## d ## _ ## e ## _ ## f
#define BOOST_BINDLIB_NAMESPACE_VERSION5(a, b, c, d, e) a ## _ ## b ## _ ## c ## _ ## d ## _ ## e
#define BOOST_BINDLIB_NAMESPACE_VERSION4(a, b, c, d) a ## _ ## b ## _ ## c ## _ ## d
#define BOOST_BINDLIB_NAMESPACE_VERSION3(a, b, c) a ## _ ## b ## _ ## c
#define BOOST_BINDLIB_NAMESPACE_VERSION2(a, b) a ## _ ## b
#define BOOST_BINDLIB_NAMESPACE_VERSION1(a) a
#define BOOST_BINDLIB_NAMESPACE_VERSION(...) BOOST_BINDLIB_CALL_OVERLOAD(BOOST_BINDLIB_NAMESPACE_VERSION,__VA_ARGS__)

#ifdef BOOST_BINDLIB_DISABLE_NAMESPACE_MODIFIERS
# define BOOST_BINDLIB_NAMESPACE_SELECT_2(name, modifier)
# define BOOST_BINDLIB_NAMESPACE_SELECT2(name, modifier)
#else
# define BOOST_BINDLIB_NAMESPACE_SELECT_2(name, modifier) name
# define BOOST_BINDLIB_NAMESPACE_SELECT2(name, modifier) :: name
#endif
#define BOOST_BINDLIB_NAMESPACE_SELECT_1(name) name
#define BOOST_BINDLIB_NAMESPACE_SELECT1(name) :: name
#define BOOST_BINDLIB_NAMESPACE_SELECT_(...) BOOST_BINDLIB_CALL_OVERLOAD_(BOOST_BINDLIB_NAMESPACE_SELECT_,__VA_ARGS__)
#define BOOST_BINDLIB_NAMESPACE_SELECT(...) BOOST_BINDLIB_CALL_OVERLOAD_(BOOST_BINDLIB_NAMESPACE_SELECT,__VA_ARGS__)
#define BOOST_BINDLIB_NAMESPACE_EXPAND8(a, b, c, d, e, f, g, h) BOOST_BINDLIB_NAMESPACE_SELECT_ a BOOST_BINDLIB_NAMESPACE_SELECT b BOOST_BINDLIB_NAMESPACE_SELECT c BOOST_BINDLIB_NAMESPACE_SELECT d BOOST_BINDLIB_NAMESPACE_SELECT e BOOST_BINDLIB_NAMESPACE_SELECT f BOOST_BINDLIB_NAMESPACE_SELECT g BOOST_BINDLIB_NAMESPACE_SELECT h
#define BOOST_BINDLIB_NAMESPACE_EXPAND7(a, b, c, d, e, f, g) BOOST_BINDLIB_NAMESPACE_SELECT_ a BOOST_BINDLIB_NAMESPACE_SELECT b BOOST_BINDLIB_NAMESPACE_SELECT c BOOST_BINDLIB_NAMESPACE_SELECT d BOOST_BINDLIB_NAMESPACE_SELECT e BOOST_BINDLIB_NAMESPACE_SELECT f BOOST_BINDLIB_NAMESPACE_SELECT g
#define BOOST_BINDLIB_NAMESPACE_EXPAND6(a, b, c, d, e, f) BOOST_BINDLIB_NAMESPACE_SELECT_ a BOOST_BINDLIB_NAMESPACE_SELECT b BOOST_BINDLIB_NAMESPACE_SELECT c BOOST_BINDLIB_NAMESPACE_SELECT d BOOST_BINDLIB_NAMESPACE_SELECT e BOOST_BINDLIB_NAMESPACE_SELECT f
#define BOOST_BINDLIB_NAMESPACE_EXPAND5(a, b, c, d, e) BOOST_BINDLIB_NAMESPACE_SELECT_ a BOOST_BINDLIB_NAMESPACE_SELECT b BOOST_BINDLIB_NAMESPACE_SELECT c BOOST_BINDLIB_NAMESPACE_SELECT d BOOST_BINDLIB_NAMESPACE_SELECT e
#define BOOST_BINDLIB_NAMESPACE_EXPAND4(a, b, c, d) BOOST_BINDLIB_NAMESPACE_SELECT_ a BOOST_BINDLIB_NAMESPACE_SELECT b BOOST_BINDLIB_NAMESPACE_SELECT c BOOST_BINDLIB_NAMESPACE_SELECT d
#define BOOST_BINDLIB_NAMESPACE_EXPAND3(a, b, c) BOOST_BINDLIB_NAMESPACE_SELECT_ a BOOST_BINDLIB_NAMESPACE_SELECT b BOOST_BINDLIB_NAMESPACE_SELECT c
#define BOOST_BINDLIB_NAMESPACE_EXPAND2(a, b) BOOST_BINDLIB_NAMESPACE_SELECT_ a BOOST_BINDLIB_NAMESPACE_SELECT b
#define BOOST_BINDLIB_NAMESPACE_EXPAND1(a) BOOST_BINDLIB_NAMESPACE_SELECT_ a
// Expands into a::b::c:: ...
#define BOOST_BINDLIB_NAMESPACE(...) BOOST_BINDLIB_CALL_OVERLOAD(BOOST_BINDLIB_NAMESPACE_EXPAND,__VA_ARGS__)

#ifdef BOOST_BINDLIB_DISABLE_NAMESPACE_MODIFIERS
# define BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT2(name, modifier)
#else
# define BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT2(name, modifier) modifier namespace name {
#endif
#define BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT1(name) namespace name {
#define BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT(...) BOOST_BINDLIB_CALL_OVERLOAD_(BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT,__VA_ARGS__)
#define BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND8(a, b, c, d, e, f, g, h) BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND7(b, c, d, e, f, g, h)
#define BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND7(a, b, c, d, e, f, g) BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND6(b, c, d, e, f, g)
#define BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND6(a, b, c, d, e, f) BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND5(b, c, d, e, f)
#define BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND5(a, b, c, d, e) BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND4(b, c, d, e)
#define BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND4(a, b, c, d) BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND3(b, c, d)
#define BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND3(a, b, c) BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND2(b, c)
#define BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND2(a, b) BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND1(b)
#define BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND1(a) BOOST_BINDLIB_NAMESPACE_BEGIN_NAMESPACE_SELECT a

// Expands into namespace a { namespace b { namespace c ...
#define BOOST_BINDLIB_NAMESPACE_BEGIN(...) BOOST_BINDLIB_CALL_OVERLOAD(BOOST_BINDLIB_NAMESPACE_BEGIN_EXPAND,__VA_ARGS__)

#ifdef BOOST_BINDLIB_DISABLE_NAMESPACE_MODIFIERS
# define BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT2(name, modifier)
#else
# define BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT2(name, modifier) }
#endif
#define BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT1(name) }
#define BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT(...) BOOST_BINDLIB_CALL_OVERLOAD_(BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT,__VA_ARGS__)
#define BOOST_BINDLIB_NAMESPACE_END_EXPAND8(a, b, c, d, e, f, g, h) BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_END_EXPAND7(b, c, d, e, f, g, h)
#define BOOST_BINDLIB_NAMESPACE_END_EXPAND7(a, b, c, d, e, f, g) BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_END_EXPAND6(b, c, d, e, f, g)
#define BOOST_BINDLIB_NAMESPACE_END_EXPAND6(a, b, c, d, e, f) BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_END_EXPAND5(b, c, d, e, f)
#define BOOST_BINDLIB_NAMESPACE_END_EXPAND5(a, b, c, d, e) BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_END_EXPAND4(b, c, d, e)
#define BOOST_BINDLIB_NAMESPACE_END_EXPAND4(a, b, c, d) BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_END_EXPAND3(b, c, d)
#define BOOST_BINDLIB_NAMESPACE_END_EXPAND3(a, b, c) BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_END_EXPAND2(b, c)
#define BOOST_BINDLIB_NAMESPACE_END_EXPAND2(a, b) BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT a BOOST_BINDLIB_NAMESPACE_END_EXPAND1(b)
#define BOOST_BINDLIB_NAMESPACE_END_EXPAND1(a) BOOST_BINDLIB_NAMESPACE_END_NAMESPACE_SELECT a

// Expands into } } ...
#define BOOST_BINDLIB_NAMESPACE_END(...) BOOST_BINDLIB_CALL_OVERLOAD(BOOST_BINDLIB_NAMESPACE_END_EXPAND,__VA_ARGS__)

// Expands into "local-bind-cpp-library/bind/stl11/impl/library"
#define BOOST_BINDLIB_INCLUDE_STL11(prefix, impl, lib) BOOST_BINDLIB_STRINGIZE(prefix/bind/stl11/impl/lib)
#define BOOST_BINDLIB_INCLUDE_STL1z(prefix, impl, lib) BOOST_BINDLIB_STRINGIZE(prefix/bind/stl1z/impl/lib)

// Expands into
#define BOOST_BINDLIB_DECLARE(decl, desc) static const char *boost_bindlib_out[]={ #decl, desc };

#endif
