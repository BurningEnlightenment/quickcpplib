/* String algorithms
(C) 2016 Niall Douglas http://www.nedprod.com/
File Created: Jun 2016


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef BOOSTLITE_ALGORITHM_STRING_HPP
#define BOOSTLITE_ALGORITHM_STRING_HPP

#include "../span.hpp"

#include <locale>
#include <string>

BOOSTLITE_NAMESPACE_BEGIN

namespace algorithm
{
  namespace string
  {
    //! Returns an all lower case edition of the input string. i18n aware.
    template <class Char> std::basic_string<Char> tolower(std::basic_string<Char> s)
    {
      auto &f = std::use_facet<std::ctype<Char>>(std::locale());
      std::transform(s.begin(), s.end(), s.begin(), [&](Char c) { return f.tolower(c); });
      return s;
    }

    //! Returns an all upper case edition of the input string. i18n aware.
    template <class Char> std::basic_string<Char> toupper(std::basic_string<Char> s)
    {
      auto &f = std::use_facet<std::ctype<Char>>(std::locale());
      std::transform(s.begin(), s.end(), s.begin(), [&](Char c) { return f.toupper(c); });
      return s;
    }

/*! \brief Converts a number to a hex string. Out buffer can be same as in buffer.

Note that the character range used is a 16 item table of:

0123456789abcdef

This lets one pack one byte of input into two bytes of output.

\ingroup utils
\complexity{O(N) where N is the length of the number.}
\exceptionmodel{Throws exception if output buffer is too small for input.}
*/
#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 6293)  // MSVC sanitiser warns that we wrap n in the for loop
#endif
    inline size_t to_hex_string(char *out, size_t outlen, const char *_in, size_t inlen)
    {
      unsigned const char *in = (unsigned const char *) _in;
      static constexpr char table[] = "0123456789abcdef";
      if(outlen < inlen * 2)
        throw std::invalid_argument("Output buffer too small.");
      for(size_t n = inlen - 2; n <= inlen - 2; n -= 2)
      {
        out[n * 2 + 3] = table[(in[n + 1] >> 4) & 0xf];
        out[n * 2 + 2] = table[in[n + 1] & 0xf];
        out[n * 2 + 1] = table[(in[n] >> 4) & 0xf];
        out[n * 2 + 0] = table[in[n] & 0xf];
      }
      if(inlen & 1)
      {
        out[1] = table[(in[0] >> 4) & 0xf];
        out[0] = table[in[0] & 0xf];
      }
      return inlen * 2;
    }
#ifdef _MSC_VER
#pragma warning(pop)
#endif
    //! \overload
    inline size_t to_hex_string(span::span<char> out, const span::span<char> in) { return to_hex_string(out.data(), out.size(), in.data(), in.size()); }
    //! \overload
    inline std::string to_hex_string(span::span<char> in)
    {
      std::string out(in.size() * 2, ' ');
      to_hex_string(const_cast<char *>(out.data()), out.size(), in.data(), in.size());
      return out;
    }

    /*! \brief Converts a hex string to a number. Out buffer can be same as in buffer.

    Note that this routine is about 43% slower than to_hex_string(), half of which is due to input validation.

    \ingroup utils
    \complexity{O(N) where N is the length of the string.}
    \exceptionmodel{Throws exception if output buffer is too small for input or input size is not multiple of two.}
    */
    inline size_t from_hex_string(char *out, size_t outlen, const char *in, size_t inlen)
    {
      if(inlen % 2)
        throw std::invalid_argument("Input buffer not multiple of two.");
      if(outlen < inlen / 2)
        throw std::invalid_argument("Output buffer too small.");
      bool is_invalid = false;
      auto fromhex = [&is_invalid](char c) -> unsigned char {
#if 1
        // ASCII starting from 48 is 0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
        //                           48               65                              97
        static constexpr unsigned char table[] = {0,   1,   2,   3,   4,   5,   6,   7,   8,   9,                                                                                    // +10 = 58
                                                  255, 255, 255, 255, 255, 255, 255,                                                                                                 // +7  = 65
                                                  10,  11,  12,  13,  14,  15,                                                                                                       // +6  = 71
                                                  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,  // +26 = 97
                                                  10,  11,  12,  13,  14,  15};
        unsigned char r = 255;
        if(c >= 48 && c <= 102)
          r = table[c - 48];
        if(r == 255)
          is_invalid = true;
        return r;
#else
        if(c >= '0' && c <= '9')
          return c - '0';
        if(c >= 'a' && c <= 'f')
          return c - 'a' + 10;
        if(c >= 'A' && c <= 'F')
          return c - 'A' + 10;
        throw std::invalid_argument("Input is not hexadecimal.");
#endif
      };
      for(size_t n = 0; n < inlen / 2; n += 4)
      {
        unsigned char c[8];
        c[0] = fromhex(in[n * 2]);
        c[1] = fromhex(in[n * 2 + 1]);
        c[2] = fromhex(in[n * 2 + 2]);
        c[3] = fromhex(in[n * 2 + 3]);
        out[n] = (c[1] << 4) | c[0];
        c[4] = fromhex(in[n * 2 + 4]);
        c[5] = fromhex(in[n * 2 + 5]);
        out[n + 1] = (c[3] << 4) | c[2];
        c[6] = fromhex(in[n * 2 + 6]);
        c[7] = fromhex(in[n * 2 + 7]);
        out[n + 2] = (c[5] << 4) | c[4];
        out[n + 3] = (c[7] << 4) | c[6];
      }
      for(size_t n = inlen / 2 - (inlen / 2) % 4; n < inlen / 2; n++)
      {
        unsigned char c1 = fromhex(in[n * 2]), c2 = fromhex(in[n * 2 + 1]);
        out[n] = (c2 << 4) | c1;
      }
      if(is_invalid)
        throw std::invalid_argument("Input is not hexadecimal.");
      return inlen / 2;
    }
  }
}

BOOSTLITE_NAMESPACE_END

#endif
